/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RedisUserV2ApiController binds http requests to an api service and writes the service results to the http response
type RedisUserV2ApiController struct {
	service      RedisUserV2ApiServicer
	errorHandler ErrorHandler
}

// RedisUserV2ApiOption for how the controller is set up.
type RedisUserV2ApiOption func(*RedisUserV2ApiController)

// WithRedisUserV2ApiErrorHandler inject ErrorHandler into controller
func WithRedisUserV2ApiErrorHandler(h ErrorHandler) RedisUserV2ApiOption {
	return func(c *RedisUserV2ApiController) {
		c.errorHandler = h
	}
}

// NewRedisUserV2ApiController creates a default api controller
func NewRedisUserV2ApiController(s RedisUserV2ApiServicer, opts ...RedisUserV2ApiOption) Router {
	controller := &RedisUserV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RedisUserV2ApiController
func (c *RedisUserV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2ResourcesApplicationsRedisUsersV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/redis/users/v2/",
			c.ClusterManagementV2ResourcesApplicationsRedisUsersV2Post,
		},
		{
			"ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/redis/users/v2/{redisUserId}/",
			c.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdDelete,
		},
		{
			"ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/redis/users/v2/{redisUserId}/",
			c.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdGet,
		},
		{
			"ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/redis/users/v2/{redisUserId}/",
			c.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdPut,
		},
	}
}

// ClusterManagementV2ResourcesApplicationsRedisUsersV2Post - Create a Redis User.
func (c *RedisUserV2ApiController) ClusterManagementV2ResourcesApplicationsRedisUsersV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := RedisUserV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedisUserV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisUsersV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdDelete - Delete a Redis user
func (c *RedisUserV2ApiController) ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	redisUserIdParam := params["redisUserId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdDelete(r.Context(), redisUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdGet - Get Redis User details.
func (c *RedisUserV2ApiController) ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	redisUserIdParam := params["redisUserId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdGet(r.Context(), redisUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdPut - Update Redis user password
func (c *RedisUserV2ApiController) ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	redisUserIdParam := params["redisUserId"]

	bodyParam := RedisUserPasswordV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedisUserPasswordV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisUsersV2RedisUserIdPut(r.Context(), redisUserIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
