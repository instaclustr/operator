/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BundleUserAPIController binds http requests to an api service and writes the service results to the http response
type BundleUserAPIController struct {
	service      BundleUserAPIServicer
	errorHandler ErrorHandler
}

// BundleUserAPIOption for how the controller is set up.
type BundleUserAPIOption func(*BundleUserAPIController)

// WithBundleUserAPIErrorHandler inject ErrorHandler into controller
func WithBundleUserAPIErrorHandler(h ErrorHandler) BundleUserAPIOption {
	return func(c *BundleUserAPIController) {
		c.errorHandler = h
	}
}

// NewBundleUserAPIController creates a default api controller
func NewBundleUserAPIController(s BundleUserAPIServicer, opts ...BundleUserAPIOption) Router {
	controller := &BundleUserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BundleUserAPIController
func (c *BundleUserAPIController) Routes() Routes {
	return Routes{
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/provisioning/v1/{clusterId}/{bundle}/users",
			c.CreateUser,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/provisioning/v1/{clusterId}/{bundle}/users",
			c.DeleteUser,
		},
		"FetchUser": Route{
			strings.ToUpper("Get"),
			"/provisioning/v1/{clusterId}/{bundle}/users",
			c.FetchUsers,
		},
		"GetDefaultCreds": Route{
			strings.ToUpper("Get"),
			"/provisioning/v1/{clusterId}",
			c.GetDefaultCreds,
		},
	}
}

// CreateUser - Add a bundle user
func (c *BundleUserAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	bundleParam := params["bundle"]
	bundleUserCreateRequestParam := BundleUserCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bundleUserCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBundleUserCreateRequestRequired(bundleUserCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBundleUserCreateRequestConstraints(bundleUserCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUser(r.Context(), clusterIdParam, bundleParam, bundleUserCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUser - Delete a bundle user
func (c *BundleUserAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	bundleParam := params["bundle"]
	bundleUserDeleteRequestParam := BundleUserDeleteRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bundleUserDeleteRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBundleUserDeleteRequestRequired(bundleUserDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBundleUserDeleteRequestConstraints(bundleUserDeleteRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), clusterIdParam, bundleParam, bundleUserDeleteRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

func (c *BundleUserAPIController) FetchUsers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	bundleParam := params["bundle"]

	result, err := c.service.FetchUsers(r.Context(), clusterIdParam, bundleParam)
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

func (c *BundleUserAPIController) GetDefaultCreds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)

	clusterID := params["clusterId"]

	result, err := c.service.GetDefaultCreds(r.Context(), clusterID)
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}

	EncodeJSONResponse(result.Body, &result.Code, w)
}
