/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BundleUserApiController binds http requests to an api service and writes the service results to the http response
type BundleUserApiController struct {
	service      BundleUserApiServicer
	errorHandler ErrorHandler
}

// BundleUserApiOption for how the controller is set up.
type BundleUserApiOption func(*BundleUserApiController)

// WithBundleUserApiErrorHandler inject ErrorHandler into controller
func WithBundleUserApiErrorHandler(h ErrorHandler) BundleUserApiOption {
	return func(c *BundleUserApiController) {
		c.errorHandler = h
	}
}

// NewBundleUserApiController creates a default api controller
func NewBundleUserApiController(s BundleUserApiServicer, opts ...BundleUserApiOption) Router {
	controller := &BundleUserApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BundleUserApiController
func (c *BundleUserApiController) Routes() Routes {
	return Routes{
		{
			"CreateUser",
			strings.ToUpper("Post"),
			"/provisioning/v1/{clusterId}/{bundle}/users",
			c.CreateUser,
		},
		{
			"DeleteUser",
			strings.ToUpper("Delete"),
			"/provisioning/v1/{clusterId}/{bundle}/users",
			c.DeleteUser,
		},
	}
}

// CreateUser - Add a bundle user
func (c *BundleUserApiController) CreateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	bundleParam := params["bundle"]
	result, err := c.service.CreateUser(r.Context(), clusterIdParam, bundleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteUser - Delete a bundle user
func (c *BundleUserApiController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	bundleParam := params["bundle"]
	result, err := c.service.DeleteUser(r.Context(), clusterIdParam, bundleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
