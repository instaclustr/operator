/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// GcpVpcPeerV2 - Definition of an GCP VPC Peering request to allow privately routed connections to a target data centre.
type GcpVpcPeerV2 struct {

	// The project ID of the owner of the accepter VPC.
	PeerProjectId string `json:"peerProjectId"`

	// The subnets for the peering VPC.
	PeerSubnets []string `json:"peerSubnets"`

	// Reason for Peering Connection Failure.
	FailureReason string `json:"failureReason,omitempty"`

	// GCP Project ID of the Data Centre.
	DataCentreProjectId string `json:"dataCentreProjectId,omitempty"`

	// Name of the Peering Connection.
	Name string `json:"name,omitempty"`

	// ID of the VPC peering connection.
	Id string `json:"id,omitempty"`

	// Vpc Network Name of the Data Centre VPC.
	DataCentreVpcNetworkName string `json:"dataCentreVpcNetworkName,omitempty"`

	// The name of the VPC Network you wish to peer to.
	PeerVpcNetworkName string `json:"peerVpcNetworkName"`

	// Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `ACTIVE` or `UNKNOWN`.
	StatusCode string `json:"statusCode,omitempty"`

	// ID of the Cluster Data Centre.
	CdcId string `json:"cdcId"`
}

// AssertGcpVpcPeerV2Required checks if the required fields are not zero-ed
func AssertGcpVpcPeerV2Required(obj GcpVpcPeerV2) error {
	elements := map[string]interface{}{
		"peerProjectId":      obj.PeerProjectId,
		"peerSubnets":        obj.PeerSubnets,
		"peerVpcNetworkName": obj.PeerVpcNetworkName,
		"cdcId":              obj.CdcId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertGcpVpcPeerV2Constraints checks if the values respects the defined constraints
func AssertGcpVpcPeerV2Constraints(obj GcpVpcPeerV2) error {
	return nil
}
