/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaConnectMirrorV2 - Details of a Kafka Connect Mirror
type KafkaConnectMirrorV2 struct {

	// The latency in milliseconds above which this mirror will be considered out of sync. It can not be less than 1000ms. The suggested initial latency is 30000ms  for connectors to be created.
	TargetLatency int32 `json:"targetLatency"`

	// Detailed list of Connectors for the mirror.
	Connectors []KafkaConnectMirrorConnectorDetailsV2 `json:"connectors,omitempty"`

	// ID of the kafka connect cluster
	KafkaConnectClusterId string `json:"kafkaConnectClusterId"`

	// Details to connect to the source kafka cluster
	SourceCluster []KafkaConnectMirrorSourceClusterDetailsV2 `json:"sourceCluster"`

	// Maximum number of tasks for Kafka Connect to use. Should be greater than 0.
	MaxTasks int32 `json:"maxTasks"`

	// Whether to rename topics as they are mirrored, by prefixing the sourceCluster.alias to the topic name.
	RenameMirroredTopics bool `json:"renameMirroredTopics"`

	// Name of the mirror connector. The value of this property has the form: [source-cluster].[target-cluster].[random-string]
	ConnectorName string `json:"connectorName,omitempty"`

	// ID of the mirror
	Id string `json:"id,omitempty"`

	// Detailed list of Mirrored topics.
	MirroredTopics []KafkaConnectMirroredTopicDetailsV2 `json:"mirroredTopics,omitempty"`

	// Regex to select which topics to mirror.
	TopicsRegex string `json:"topicsRegex"`

	// The overall status of this mirror.
	Status string `json:"status,omitempty"`
}

// AssertKafkaConnectMirrorV2Required checks if the required fields are not zero-ed
func AssertKafkaConnectMirrorV2Required(obj KafkaConnectMirrorV2) error {
	elements := map[string]interface{}{
		"targetLatency":         obj.TargetLatency,
		"kafkaConnectClusterId": obj.KafkaConnectClusterId,
		"sourceCluster":         obj.SourceCluster,
		"maxTasks":              obj.MaxTasks,
		"renameMirroredTopics":  obj.RenameMirroredTopics,
		"topicsRegex":           obj.TopicsRegex,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Connectors {
		if err := AssertKafkaConnectMirrorConnectorDetailsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SourceCluster {
		if err := AssertKafkaConnectMirrorSourceClusterDetailsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MirroredTopics {
		if err := AssertKafkaConnectMirroredTopicDetailsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertKafkaConnectMirrorV2Constraints checks if the values respects the defined constraints
func AssertKafkaConnectMirrorV2Constraints(obj KafkaConnectMirrorV2) error {
	return nil
}
