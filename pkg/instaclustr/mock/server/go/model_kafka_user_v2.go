/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaUserV2 - Definition of a Kafka User to be applied to a Kafka cluster.
type KafkaUserV2 struct {

	// Password for the Kafka user.
	Password string `json:"password"`

	Options KafkaUserOptionsV2 `json:"options"`

	// ID of the Kafka cluster.
	ClusterId string `json:"clusterId"`

	// Instaclustr identifier for the Kafka user. The value of this property has the form: [cluster-id]_[kafka-username]
	Id string `json:"id,omitempty"`

	// Permissions initially granted to Kafka user upon creation.
	InitialPermissions string `json:"initialPermissions"`

	// Username of the Kafka user.
	Username string `json:"username"`
}

// AssertKafkaUserV2Required checks if the required fields are not zero-ed
func AssertKafkaUserV2Required(obj KafkaUserV2) error {
	elements := map[string]interface{}{
		"password":           obj.Password,
		"options":            obj.Options,
		"clusterId":          obj.ClusterId,
		"initialPermissions": obj.InitialPermissions,
		"username":           obj.Username,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertKafkaUserOptionsV2Required(obj.Options); err != nil {
		return err
	}
	return nil
}

// AssertRecurseKafkaUserV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaUserV2 (e.g. [][]KafkaUserV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaUserV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaUserV2, ok := obj.(KafkaUserV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaUserV2Required(aKafkaUserV2)
	})
}
