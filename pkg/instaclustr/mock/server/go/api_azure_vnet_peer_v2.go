/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AzureVnetPeerV2APIController binds http requests to an api service and writes the service results to the http response
type AzureVnetPeerV2APIController struct {
	service      AzureVnetPeerV2APIServicer
	errorHandler ErrorHandler
}

// AzureVnetPeerV2APIOption for how the controller is set up.
type AzureVnetPeerV2APIOption func(*AzureVnetPeerV2APIController)

// WithAzureVnetPeerV2APIErrorHandler inject ErrorHandler into controller
func WithAzureVnetPeerV2APIErrorHandler(h ErrorHandler) AzureVnetPeerV2APIOption {
	return func(c *AzureVnetPeerV2APIController) {
		c.errorHandler = h
	}
}

// NewAzureVnetPeerV2APIController creates a default api controller
func NewAzureVnetPeerV2APIController(s AzureVnetPeerV2APIServicer, opts ...AzureVnetPeerV2APIOption) Router {
	controller := &AzureVnetPeerV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AzureVnetPeerV2APIController
func (c *AzureVnetPeerV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesProvidersAzureVnetPeersV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/azure/vnet-peers/v2",
			c.ClusterManagementV2DataSourcesProvidersAzureVnetPeersV2Get,
		},
		"ClusterManagementV2ResourcesProvidersAzureVnetPeersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/azure/vnet-peers/v2",
			c.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2Post,
		},
		"ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/azure/vnet-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdDelete,
		},
		"ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/azure/vnet-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdGet,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersAzureVnetPeersV2Get - List all Azure VNet Peering requests
func (c *AzureVnetPeerV2APIController) ClusterManagementV2DataSourcesProvidersAzureVnetPeersV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesProvidersAzureVnetPeersV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAzureVnetPeersV2Post - Create Azure Vnet Peering Request
func (c *AzureVnetPeerV2APIController) ClusterManagementV2ResourcesProvidersAzureVnetPeersV2Post(w http.ResponseWriter, r *http.Request) {
	azureVnetPeerV2Param := AzureVnetPeerV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&azureVnetPeerV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAzureVnetPeerV2Required(azureVnetPeerV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAzureVnetPeerV2Constraints(azureVnetPeerV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2Post(r.Context(), azureVnetPeerV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdDelete - Delete Azure Vnet Peering Connection
func (c *AzureVnetPeerV2APIController) ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdDelete(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdGet - Get Azure Vnet Peering Connection info
func (c *AzureVnetPeerV2APIController) ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAzureVnetPeersV2VpcPeerIdGet(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
