/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgreSQLReloadOperationV2APIController binds http requests to an api service and writes the service results to the http response
type PostgreSQLReloadOperationV2APIController struct {
	service      PostgreSQLReloadOperationV2APIServicer
	errorHandler ErrorHandler
}

// PostgreSQLReloadOperationV2APIOption for how the controller is set up.
type PostgreSQLReloadOperationV2APIOption func(*PostgreSQLReloadOperationV2APIController)

// WithPostgreSQLReloadOperationV2APIErrorHandler inject ErrorHandler into controller
func WithPostgreSQLReloadOperationV2APIErrorHandler(h ErrorHandler) PostgreSQLReloadOperationV2APIOption {
	return func(c *PostgreSQLReloadOperationV2APIController) {
		c.errorHandler = h
	}
}

// NewPostgreSQLReloadOperationV2APIController creates a default api controller
func NewPostgreSQLReloadOperationV2APIController(s PostgreSQLReloadOperationV2APIServicer, opts ...PostgreSQLReloadOperationV2APIOption) Router {
	controller := &PostgreSQLReloadOperationV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgreSQLReloadOperationV2APIController
func (c *PostgreSQLReloadOperationV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/applications/postgresql/clusters/v2/{clusterId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet,
		},
		"ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/applications/postgresql/nodes/v2/{nodeId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet,
		},
		"ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/postgresql/nodes/v2/{nodeId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost,
		},
	}
}

// ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet - Get cluster reload operations
func (c *PostgreSQLReloadOperationV2APIController) ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet - Get node reload operation
func (c *PostgreSQLReloadOperationV2APIController) ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nodeIdParam := params["nodeId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet(r.Context(), nodeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost - Trigger a node reload operation
func (c *PostgreSQLReloadOperationV2APIController) ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nodeIdParam := params["nodeId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost(r.Context(), nodeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
