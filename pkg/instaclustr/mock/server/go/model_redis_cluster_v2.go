/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// RedisClusterV2 - Definition of a managed Redis cluster that can be provisioned in Instaclustr.
type RedisClusterV2 struct {

	// Enables Client â‡„ Node Encryption.
	ClientToNodeEncryption bool `json:"clientToNodeEncryption"`

	// Version of Redis to run on the cluster. Available versions: <ul> <li>`6.2.7`</li> <li>`7.0.5`</li> </ul>
	RedisVersion string `json:"redisVersion"`

	// Creates a PCI compliant cluster, see [PCI Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
	PciComplianceMode bool `json:"pciComplianceMode"`

	// List of data centre settings.
	DataCentres []RedisDataCentreV2 `json:"dataCentres"`

	CurrentClusterOperationStatus CurrentClusterOperationStatusV2 `json:"currentClusterOperationStatus,omitempty"`

	// Creates the cluster with private network only, see [Private Network Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
	PrivateNetworkCluster bool `json:"privateNetworkCluster"`

	// Enables Password Authentication and User Authorization.
	PasswordAndUserAuth bool `json:"passwordAndUserAuth"`

	// Name of the cluster.
	Name string `json:"name"`

	//
	TwoFactorDelete []TwoFactorDeleteSettingsV2 `json:"twoFactorDelete,omitempty"`

	// ID of the cluster.
	Id string `json:"id,omitempty"`

	SlaTier SlaTierV2 `json:"slaTier"`

	// Status of the cluster.
	Status string `json:"status,omitempty"`
}

// AssertRedisClusterV2Required checks if the required fields are not zero-ed
func AssertRedisClusterV2Required(obj RedisClusterV2) error {
	elements := map[string]interface{}{
		"clientToNodeEncryption": obj.ClientToNodeEncryption,
		"redisVersion":           obj.RedisVersion,
		"pciComplianceMode":      obj.PciComplianceMode,
		"dataCentres":            obj.DataCentres,
		"privateNetworkCluster":  obj.PrivateNetworkCluster,
		"passwordAndUserAuth":    obj.PasswordAndUserAuth,
		"name":                   obj.Name,
		"slaTier":                obj.SlaTier,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DataCentres {
		if err := AssertRedisDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TwoFactorDelete {
		if err := AssertTwoFactorDeleteSettingsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseRedisClusterV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RedisClusterV2 (e.g. [][]RedisClusterV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRedisClusterV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRedisClusterV2, ok := obj.(RedisClusterV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRedisClusterV2Required(aRedisClusterV2)
	})
}
