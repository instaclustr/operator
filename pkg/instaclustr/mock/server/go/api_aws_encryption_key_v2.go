/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AWSEncryptionKeyV2ApiController binds http requests to an api service and writes the service results to the http response
type AWSEncryptionKeyV2ApiController struct {
	service      AWSEncryptionKeyV2ApiServicer
	errorHandler ErrorHandler
}

// AWSEncryptionKeyV2ApiOption for how the controller is set up.
type AWSEncryptionKeyV2ApiOption func(*AWSEncryptionKeyV2ApiController)

// WithAWSEncryptionKeyV2ApiErrorHandler inject ErrorHandler into controller
func WithAWSEncryptionKeyV2ApiErrorHandler(h ErrorHandler) AWSEncryptionKeyV2ApiOption {
	return func(c *AWSEncryptionKeyV2ApiController) {
		c.errorHandler = h
	}
}

// NewAWSEncryptionKeyV2ApiController creates a default api controller
func NewAWSEncryptionKeyV2ApiController(s AWSEncryptionKeyV2ApiServicer, opts ...AWSEncryptionKeyV2ApiOption) Router {
	controller := &AWSEncryptionKeyV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AWSEncryptionKeyV2ApiController
func (c *AWSEncryptionKeyV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/aws/encryption-keys/v2",
			c.ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2/{encryptionKeyId}",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2/{encryptionKeyId}",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get - List all AWS encryption keys
func (c *AWSEncryptionKeyV2ApiController) ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete - Delete encryption key
func (c *AWSEncryptionKeyV2ApiController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	encryptionKeyIdParam := params["encryptionKeyId"]

	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete(r.Context(), encryptionKeyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet - Get encryption key details
func (c *AWSEncryptionKeyV2ApiController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	encryptionKeyIdParam := params["encryptionKeyId"]

	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet(r.Context(), encryptionKeyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post - Add an AWS KMS encryption key
func (c *AWSEncryptionKeyV2ApiController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := AwsEncryptionKeyV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsEncryptionKeyV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
