/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AWSEncryptionKeyV2APIController binds http requests to an api service and writes the service results to the http response
type AWSEncryptionKeyV2APIController struct {
	service      AWSEncryptionKeyV2APIServicer
	errorHandler ErrorHandler
}

// AWSEncryptionKeyV2APIOption for how the controller is set up.
type AWSEncryptionKeyV2APIOption func(*AWSEncryptionKeyV2APIController)

// WithAWSEncryptionKeyV2APIErrorHandler inject ErrorHandler into controller
func WithAWSEncryptionKeyV2APIErrorHandler(h ErrorHandler) AWSEncryptionKeyV2APIOption {
	return func(c *AWSEncryptionKeyV2APIController) {
		c.errorHandler = h
	}
}

// NewAWSEncryptionKeyV2APIController creates a default api controller
func NewAWSEncryptionKeyV2APIController(s AWSEncryptionKeyV2APIServicer, opts ...AWSEncryptionKeyV2APIOption) Router {
	controller := &AWSEncryptionKeyV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AWSEncryptionKeyV2APIController
func (c *AWSEncryptionKeyV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/aws/encryption-keys/v2/",
			c.ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get,
		},
		"ClusterManagementV2OperationsProvidersAwsEncryptionKeysV2EncryptionKeyIdValidateV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/providers/aws/encryption-keys/v2/{encryptionKeyId}/validate/v2/",
			c.ClusterManagementV2OperationsProvidersAwsEncryptionKeysV2EncryptionKeyIdValidateV2Get,
		},
		"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2/{encryptionKeyId}/",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete,
		},
		"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2/{encryptionKeyId}/",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet,
		},
		"ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/aws/encryption-keys/v2/",
			c.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get - List all AWS encryption keys
func (c *AWSEncryptionKeyV2APIController) ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesProvidersAwsEncryptionKeysV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsProvidersAwsEncryptionKeysV2EncryptionKeyIdValidateV2Get - Validate encryption Key
func (c *AWSEncryptionKeyV2APIController) ClusterManagementV2OperationsProvidersAwsEncryptionKeysV2EncryptionKeyIdValidateV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	encryptionKeyIdParam := params["encryptionKeyId"]
	result, err := c.service.ClusterManagementV2OperationsProvidersAwsEncryptionKeysV2EncryptionKeyIdValidateV2Get(r.Context(), encryptionKeyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete - Delete encryption key
func (c *AWSEncryptionKeyV2APIController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	encryptionKeyIdParam := params["encryptionKeyId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdDelete(r.Context(), encryptionKeyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet - Get encryption key details
func (c *AWSEncryptionKeyV2APIController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	encryptionKeyIdParam := params["encryptionKeyId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2EncryptionKeyIdGet(r.Context(), encryptionKeyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post - Add an AWS KMS encryption key
func (c *AWSEncryptionKeyV2APIController) ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post(w http.ResponseWriter, r *http.Request) {
	awsEncryptionKeyV2Param := AwsEncryptionKeyV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&awsEncryptionKeyV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsEncryptionKeyV2Required(awsEncryptionKeyV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAwsEncryptionKeyV2Constraints(awsEncryptionKeyV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsEncryptionKeysV2Post(r.Context(), awsEncryptionKeyV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
