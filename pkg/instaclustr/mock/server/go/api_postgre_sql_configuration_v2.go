/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgreSQLConfigurationV2APIController binds http requests to an api service and writes the service results to the http response
type PostgreSQLConfigurationV2APIController struct {
	service      PostgreSQLConfigurationV2APIServicer
	errorHandler ErrorHandler
}

// PostgreSQLConfigurationV2APIOption for how the controller is set up.
type PostgreSQLConfigurationV2APIOption func(*PostgreSQLConfigurationV2APIController)

// WithPostgreSQLConfigurationV2APIErrorHandler inject ErrorHandler into controller
func WithPostgreSQLConfigurationV2APIErrorHandler(h ErrorHandler) PostgreSQLConfigurationV2APIOption {
	return func(c *PostgreSQLConfigurationV2APIController) {
		c.errorHandler = h
	}
}

// NewPostgreSQLConfigurationV2APIController creates a default api controller
func NewPostgreSQLConfigurationV2APIController(s PostgreSQLConfigurationV2APIServicer, opts ...PostgreSQLConfigurationV2APIOption) Router {
	controller := &PostgreSQLConfigurationV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgreSQLConfigurationV2APIController
func (c *PostgreSQLConfigurationV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesPostgresqlClusterClusterIdConfigurationsGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/postgresql_cluster/{clusterId}/configurations",
			c.ClusterManagementV2DataSourcesPostgresqlClusterClusterIdConfigurationsGet,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/postgresql/configurations/v2/{configurationId}",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/postgresql/configurations/v2/{configurationId}",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/postgresql/configurations/v2/{configurationId}",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/postgresql/configurations/v2/",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesPostgresqlClusterClusterIdConfigurationsGet - Get cluster configurations
func (c *PostgreSQLConfigurationV2APIController) ClusterManagementV2DataSourcesPostgresqlClusterClusterIdConfigurationsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesPostgresqlClusterClusterIdConfigurationsGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdDelete - Reset a configuration
func (c *PostgreSQLConfigurationV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	configurationIdParam := params["configurationId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdDelete(r.Context(), configurationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdGet - Get configuration
func (c *PostgreSQLConfigurationV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	configurationIdParam := params["configurationId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdGet(r.Context(), configurationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdPut - Update configuration
func (c *PostgreSQLConfigurationV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	configurationIdParam := params["configurationId"]
	postgresqlConfigurationPropertyUpdateV2Param := PostgresqlConfigurationPropertyUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postgresqlConfigurationPropertyUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlConfigurationPropertyUpdateV2Required(postgresqlConfigurationPropertyUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostgresqlConfigurationPropertyUpdateV2Constraints(postgresqlConfigurationPropertyUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2ConfigurationIdPut(r.Context(), configurationIdParam, postgresqlConfigurationPropertyUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2Post - Create configuration
func (c *PostgreSQLConfigurationV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2Post(w http.ResponseWriter, r *http.Request) {
	postgresqlConfigurationPropertyV2Param := PostgresqlConfigurationPropertyV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postgresqlConfigurationPropertyV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlConfigurationPropertyV2Required(postgresqlConfigurationPropertyV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostgresqlConfigurationPropertyV2Constraints(postgresqlConfigurationPropertyV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlConfigurationsV2Post(r.Context(), postgresqlConfigurationPropertyV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
