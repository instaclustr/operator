/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AWSEndpointServicePrincipalsV2ApiController binds http requests to an api service and writes the service results to the http response
type AWSEndpointServicePrincipalsV2ApiController struct {
	service      AWSEndpointServicePrincipalsV2ApiServicer
	errorHandler ErrorHandler
}

// AWSEndpointServicePrincipalsV2ApiOption for how the controller is set up.
type AWSEndpointServicePrincipalsV2ApiOption func(*AWSEndpointServicePrincipalsV2ApiController)

// WithAWSEndpointServicePrincipalsV2ApiErrorHandler inject ErrorHandler into controller
func WithAWSEndpointServicePrincipalsV2ApiErrorHandler(h ErrorHandler) AWSEndpointServicePrincipalsV2ApiOption {
	return func(c *AWSEndpointServicePrincipalsV2ApiController) {
		c.errorHandler = h
	}
}

// NewAWSEndpointServicePrincipalsV2ApiController creates a default api controller
func NewAWSEndpointServicePrincipalsV2ApiController(s AWSEndpointServicePrincipalsV2ApiServicer, opts ...AWSEndpointServicePrincipalsV2ApiOption) Router {
	controller := &AWSEndpointServicePrincipalsV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AWSEndpointServicePrincipalsV2ApiController
func (c *AWSEndpointServicePrincipalsV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesClusterDataCenterClusterDataCenterIdAwsEndpointServicePrincipalsV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster_data_center/{clusterDataCenterId}/aws-endpoint-service-principals/v2/",
			c.ClusterManagementV2DataSourcesClusterDataCenterClusterDataCenterIdAwsEndpointServicePrincipalsV2Get,
		},
		{
			"ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/aws-endpoint-service-principals/v2/",
			c.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2Post,
		},
		{
			"ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/aws-endpoint-service-principals/v2/{principalId}",
			c.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdDelete,
		},
		{
			"ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/aws-endpoint-service-principals/v2/{principalId}",
			c.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdGet,
		},
	}
}

// ClusterManagementV2DataSourcesClusterDataCenterClusterDataCenterIdAwsEndpointServicePrincipalsV2Get - List all IAM Principal ARNs.
func (c *AWSEndpointServicePrincipalsV2ApiController) ClusterManagementV2DataSourcesClusterDataCenterClusterDataCenterIdAwsEndpointServicePrincipalsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterDataCenterIdParam := params["clusterDataCenterId"]

	result, err := c.service.ClusterManagementV2DataSourcesClusterDataCenterClusterDataCenterIdAwsEndpointServicePrincipalsV2Get(r.Context(), clusterDataCenterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2Post - Add an IAM Principal ARN on the AWS Endpoint Service.
func (c *AWSEndpointServicePrincipalsV2ApiController) ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := IamPrincipalArnV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIamPrincipalArnV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdDelete - Delete an IAM Principal ARN
func (c *AWSEndpointServicePrincipalsV2ApiController) ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	principalIdParam := params["principalId"]

	result, err := c.service.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdDelete(r.Context(), principalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdGet - Retrieve a single IAM Principal ARN
func (c *AWSEndpointServicePrincipalsV2ApiController) ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	principalIdParam := params["principalId"]

	result, err := c.service.ClusterManagementV2ResourcesAwsEndpointServicePrincipalsV2PrincipalIdGet(r.Context(), principalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
