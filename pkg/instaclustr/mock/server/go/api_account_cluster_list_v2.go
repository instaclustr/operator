/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// AccountClusterListV2APIController binds http requests to an api service and writes the service results to the http response
type AccountClusterListV2APIController struct {
	service      AccountClusterListV2APIServicer
	errorHandler ErrorHandler
}

// AccountClusterListV2APIOption for how the controller is set up.
type AccountClusterListV2APIOption func(*AccountClusterListV2APIController)

// WithAccountClusterListV2APIErrorHandler inject ErrorHandler into controller
func WithAccountClusterListV2APIErrorHandler(h ErrorHandler) AccountClusterListV2APIOption {
	return func(c *AccountClusterListV2APIController) {
		c.errorHandler = h
	}
}

// NewAccountClusterListV2APIController creates a default api controller
func NewAccountClusterListV2APIController(s AccountClusterListV2APIServicer, opts ...AccountClusterListV2APIOption) Router {
	controller := &AccountClusterListV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccountClusterListV2APIController
func (c *AccountClusterListV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesClustersV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/clusters/v2",
			c.ClusterManagementV2DataSourcesClustersV2Get,
		},
	}
}

// ClusterManagementV2DataSourcesClustersV2Get - Get Active Cluster IDs
func (c *AccountClusterListV2APIController) ClusterManagementV2DataSourcesClustersV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesClustersV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
