/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"
)

// AccountClusterListV2ApiController binds http requests to an api service and writes the service results to the http response
type AccountClusterListV2ApiController struct {
	service      AccountClusterListV2ApiServicer
	errorHandler ErrorHandler
}

// AccountClusterListV2ApiOption for how the controller is set up.
type AccountClusterListV2ApiOption func(*AccountClusterListV2ApiController)

// WithAccountClusterListV2ApiErrorHandler inject ErrorHandler into controller
func WithAccountClusterListV2ApiErrorHandler(h ErrorHandler) AccountClusterListV2ApiOption {
	return func(c *AccountClusterListV2ApiController) {
		c.errorHandler = h
	}
}

// NewAccountClusterListV2ApiController creates a default api controller
func NewAccountClusterListV2ApiController(s AccountClusterListV2ApiServicer, opts ...AccountClusterListV2ApiOption) Router {
	controller := &AccountClusterListV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccountClusterListV2ApiController
func (c *AccountClusterListV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesClustersV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/clusters/v2",
			c.ClusterManagementV2DataSourcesClustersV2Get,
		},
	}
}

// ClusterManagementV2DataSourcesClustersV2Get - Get Active Cluster IDs
func (c *AccountClusterListV2ApiController) ClusterManagementV2DataSourcesClustersV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesClustersV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
