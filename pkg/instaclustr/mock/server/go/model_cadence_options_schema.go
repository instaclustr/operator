/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type CadenceOptionsSchema struct {

	// Use Advanced Visibility.
	UseAdvancedVisibility bool `json:"useAdvancedVisibility,omitempty"`

	// UUID of a Data Centre of an Instaclustr managed Cassandra Cluster, to be used by Cadence. Must be in the same Instaclustr account.
	TargetCassandraCdcId string `json:"targetCassandraCdcId"`

	// Target Cassandra VPC Type
	TargetCassandraVpcType string `json:"targetCassandraVpcType,omitempty"`

	// UUID of a Data Centre of an Instaclustr managed Kafka Cluster, to be used by Cadence. Must be in the same Instaclustr account.
	TargetKafkaCdcId string `json:"targetKafkaCdcId,omitempty"`

	// Target Kafka VPC Type
	TargetKafkaVpcType string `json:"targetKafkaVpcType,omitempty"`

	// UUID of a Data Centre of an Instaclustr managed OpenSearch Cluster, to be used by Cadence. Must be in the same Instaclustr account.
	TargetOpenSearchCdcId string `json:"targetOpenSearchCdcId,omitempty"`

	// Target OpenSearch VPC Type
	TargetOpenSearchVpcType string `json:"targetOpenSearchVpcType,omitempty"`

	// Use Cadence Archival
	EnableArchival bool `json:"enableArchival,omitempty"`

	// URI of S3 resource for Cadence Archival e.g. 's3://my-bucket'
	ArchivalS3Uri string `json:"archivalS3Uri,omitempty"`

	// Region of S3 resource for Cadence Archival e.g. 'us-east-1'
	ArchivalS3Region string `json:"archivalS3Region,omitempty"`

	// Access Key ID for IAM user with Archival bucket access
	AwsAccessKeyId string `json:"awsAccessKeyId,omitempty"`

	// Secret Access Key for IAM user with Archival bucket access
	AwsSecretAccessKey string `json:"awsSecretAccessKey,omitempty"`

	// Provisioning Type used for the Cadence cluster. If SHARED is used, then the dependant clusters will be set to the Shared Infrastructure clusters.
	ProvisioningType string `json:"provisioningType,omitempty"`

	// Advertised HostName is required for PrivateLink.
	AdvertisedHostName string `json:"advertisedHostName,omitempty"`
}

// AssertCadenceOptionsSchemaRequired checks if the required fields are not zero-ed
func AssertCadenceOptionsSchemaRequired(obj CadenceOptionsSchema) error {
	elements := map[string]interface{}{
		"targetCassandraCdcId": obj.TargetCassandraCdcId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCadenceOptionsSchemaConstraints checks if the values respects the defined constraints
func AssertCadenceOptionsSchemaConstraints(obj CadenceOptionsSchema) error {
	return nil
}
