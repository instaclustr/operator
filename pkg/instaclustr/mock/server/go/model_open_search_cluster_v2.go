/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// OpenSearchClusterV2 - Definition of a managed OpenSearch cluster that can be provisioned in Instaclustr.
type OpenSearchClusterV2 struct {

	// List of data node settings.
	DataNodes []OpenSearchDataNodeV2 `json:"dataNodes,omitempty"`

	// Version of OpenSearch to run on the cluster. Available versions: <ul> <li>`1.3.11`</li> <li>`2.7.0`</li> </ul>
	OpensearchVersion string `json:"opensearchVersion"`

	// Enable asynchronous search plugin
	AsynchronousSearchPlugin bool `json:"asynchronousSearchPlugin,omitempty"`

	// A description of the cluster
	Description string `json:"description,omitempty"`

	// Enable knn plugin
	KnnPlugin bool `json:"knnPlugin,omitempty"`

	// List of openSearch dashboards settings
	OpensearchDashboards []OpenSearchDashboardV2 `json:"opensearchDashboards,omitempty"`

	// Enable reporting plugin
	ReportingPlugin bool `json:"reportingPlugin,omitempty"`

	// Enable sql plugin
	SqlPlugin bool `json:"sqlPlugin,omitempty"`

	// Enable notifications plugin
	NotificationsPlugin bool `json:"notificationsPlugin,omitempty"`

	CurrentClusterOperationStatus CurrentClusterOperationStatusV2 `json:"currentClusterOperationStatus,omitempty"`

	// Enable anomaly detection plugin
	AnomalyDetectionPlugin bool `json:"anomalyDetectionPlugin,omitempty"`

	// Enable Load Balancer
	LoadBalancer bool `json:"loadBalancer,omitempty"`

	// Creates the cluster with private network only, see [Private Network Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
	PrivateNetworkCluster bool `json:"privateNetworkCluster,omitempty"`

	// Provision this cluster for [Bundled Use only](https://www.instaclustr.com/support/documentation/cadence/getting-started-with-cadence/bundled-use-only-cluster-deployments/).
	BundledUseOnly bool `json:"bundledUseOnly,omitempty"`

	// Settings to determine how resize requests will be performed for the cluster.
	ResizeSettings []ResizeSettingsV2 `json:"resizeSettings,omitempty"`

	// ID of the cluster.
	Id string `json:"id,omitempty"`

	SlaTier SlaTierV2 `json:"slaTier,omitempty"`

	// Creates a PCI compliant cluster, see [PCI Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
	PciComplianceMode bool `json:"pciComplianceMode"`

	// Enable icu plugin
	IcuPlugin bool `json:"icuPlugin,omitempty"`

	TwoFactorDelete []TwoFactorDeleteSettingsV2 `json:"twoFactorDelete,omitempty"`

	// Password of the default user created for the OpenSearch cluster.
	DefaultUserPassword string `json:"defaultUserPassword,omitempty"`

	// List of data centre settings.
	DataCentres []OpenSearchDataCentreV2 `json:"dataCentres"`

	// Ingest nodes settings.
	IngestNodes []OpenSearchIngestNodeV2 `json:"ingestNodes,omitempty"`

	// Username of the default user created for the OpenSearch cluster.
	DefaultUsername string `json:"defaultUsername,omitempty"`

	// Name of the cluster.
	Name string `json:"name,omitempty"`

	// List of cluster managers node settings
	ClusterManagerNodes []OpenSearchClusterManagerNodeV2 `json:"clusterManagerNodes"`

	// Enable index management plugin
	IndexManagementPlugin bool `json:"indexManagementPlugin,omitempty"`

	// Enable alerting plugin
	AlertingPlugin bool `json:"alertingPlugin,omitempty"`

	// Status of the cluster.
	Status string `json:"status,omitempty"`
}

// AssertOpenSearchClusterV2Required checks if the required fields are not zero-ed
func AssertOpenSearchClusterV2Required(obj OpenSearchClusterV2) error {
	elements := map[string]interface{}{
		"opensearchVersion":   obj.OpensearchVersion,
		"pciComplianceMode":   obj.PciComplianceMode,
		"dataCentres":         obj.DataCentres,
		"clusterManagerNodes": obj.ClusterManagerNodes,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DataNodes {
		if err := AssertOpenSearchDataNodeV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.OpensearchDashboards {
		if err := AssertOpenSearchDashboardV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ResizeSettings {
		if err := AssertResizeSettingsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TwoFactorDelete {
		if err := AssertTwoFactorDeleteSettingsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DataCentres {
		if err := AssertOpenSearchDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.IngestNodes {
		if err := AssertOpenSearchIngestNodeV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ClusterManagerNodes {
		if err := AssertOpenSearchClusterManagerNodeV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOpenSearchClusterV2Constraints checks if the values respects the defined constraints
func AssertOpenSearchClusterV2Constraints(obj OpenSearchClusterV2) error {
	return nil
}
