/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApacheKafkaUserAPIController binds http requests to an api service and writes the service results to the http response
type ApacheKafkaUserAPIController struct {
	service      ApacheKafkaUserAPIServicer
	errorHandler ErrorHandler
}

// ApacheKafkaUserAPIOption for how the controller is set up.
type ApacheKafkaUserAPIOption func(*ApacheKafkaUserAPIController)

// WithApacheKafkaUserAPIErrorHandler inject ErrorHandler into controller
func WithApacheKafkaUserAPIErrorHandler(h ErrorHandler) ApacheKafkaUserAPIOption {
	return func(c *ApacheKafkaUserAPIController) {
		c.errorHandler = h
	}
}

// NewApacheKafkaUserAPIController creates a default api controller
func NewApacheKafkaUserAPIController(s ApacheKafkaUserAPIServicer, opts ...ApacheKafkaUserAPIOption) Router {
	controller := &ApacheKafkaUserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApacheKafkaUserAPIController
func (c *ApacheKafkaUserAPIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_cluster/{clusterId}/users/v2/",
			c.ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get,
		},
		"ClusterManagementV2DataSourcesKafkaUsersKafkaUserIdCertificatesV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_users/{kafkaUserId}/certificates/v2/",
			c.ClusterManagementV2DataSourcesKafkaUsersKafkaUserIdCertificatesV2Get,
		},
		"ClusterManagementV2OperationsApplicationsKafkaUserCertificatesCertificateIdDownloadV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/applications/kafka/user-certificates/{certificateId}/download/v2",
			c.ClusterManagementV2OperationsApplicationsKafkaUserCertificatesCertificateIdDownloadV2Get,
		},
		"ClusterManagementV2OperationsApplicationsKafkaUserCertificatesRenewV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/kafka/user-certificates/renew/v2",
			c.ClusterManagementV2OperationsApplicationsKafkaUserCertificatesRenewV2Post,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/user-certificates/v2/{certificateId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/user-certificates/v2/{certificateId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/user-certificates/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2Post,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/users/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get - List all Kafka users.
func (c *ApacheKafkaUserAPIController) ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2DataSourcesKafkaUsersKafkaUserIdCertificatesV2Get - List all active certificate of a given kafka user.
func (c *ApacheKafkaUserAPIController) ClusterManagementV2DataSourcesKafkaUsersKafkaUserIdCertificatesV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]
	result, err := c.service.ClusterManagementV2DataSourcesKafkaUsersKafkaUserIdCertificatesV2Get(r.Context(), kafkaUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsKafkaUserCertificatesCertificateIdDownloadV2Get - Download a Kafka user's certificate
func (c *ApacheKafkaUserAPIController) ClusterManagementV2OperationsApplicationsKafkaUserCertificatesCertificateIdDownloadV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateIdParam := params["certificateId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsKafkaUserCertificatesCertificateIdDownloadV2Get(r.Context(), certificateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsKafkaUserCertificatesRenewV2Post - Renew a Kafka user's certificate
func (c *ApacheKafkaUserAPIController) ClusterManagementV2OperationsApplicationsKafkaUserCertificatesRenewV2Post(w http.ResponseWriter, r *http.Request) {
	kafkaUserCertificateRenewalRequestV2Param := KafkaUserCertificateRenewalRequestV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaUserCertificateRenewalRequestV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserCertificateRenewalRequestV2Required(kafkaUserCertificateRenewalRequestV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaUserCertificateRenewalRequestV2Constraints(kafkaUserCertificateRenewalRequestV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsKafkaUserCertificatesRenewV2Post(r.Context(), kafkaUserCertificateRenewalRequestV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdDelete - Delete a Kafka user's certificate.
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateIdParam := params["certificateId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdDelete(r.Context(), certificateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdGet - Get a Kafka user certificate
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	certificateIdParam := params["certificateId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2CertificateIdGet(r.Context(), certificateIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2Post - Create Kafka user's client certificate
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2Post(w http.ResponseWriter, r *http.Request) {
	kafkaUserCertificateV2Param := KafkaUserCertificateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaUserCertificateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserCertificateV2Required(kafkaUserCertificateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaUserCertificateV2Constraints(kafkaUserCertificateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUserCertificatesV2Post(r.Context(), kafkaUserCertificateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete - Delete a Kafka user
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete(r.Context(), kafkaUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet - Get Kafka User details.
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet(r.Context(), kafkaUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut - Update Kafka user password and options
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]
	kafkaUserUpdateV2Param := KafkaUserUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaUserUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserUpdateV2Required(kafkaUserUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaUserUpdateV2Constraints(kafkaUserUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut(r.Context(), kafkaUserIdParam, kafkaUserUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post - Create a Kafka User.
func (c *ApacheKafkaUserAPIController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post(w http.ResponseWriter, r *http.Request) {
	kafkaUserV2Param := KafkaUserV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaUserV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserV2Required(kafkaUserV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaUserV2Constraints(kafkaUserV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post(r.Context(), kafkaUserV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
