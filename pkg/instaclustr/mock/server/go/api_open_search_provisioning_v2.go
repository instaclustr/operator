/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OpenSearchProvisioningV2APIController binds http requests to an api service and writes the service results to the http response
type OpenSearchProvisioningV2APIController struct {
	service      OpenSearchProvisioningV2APIServicer
	errorHandler ErrorHandler
}

// OpenSearchProvisioningV2APIOption for how the controller is set up.
type OpenSearchProvisioningV2APIOption func(*OpenSearchProvisioningV2APIController)

// WithOpenSearchProvisioningV2APIErrorHandler inject ErrorHandler into controller
func WithOpenSearchProvisioningV2APIErrorHandler(h ErrorHandler) OpenSearchProvisioningV2APIOption {
	return func(c *OpenSearchProvisioningV2APIController) {
		c.errorHandler = h
	}
}

// NewOpenSearchProvisioningV2APIController creates a default api controller
func NewOpenSearchProvisioningV2APIController(s OpenSearchProvisioningV2APIServicer, opts ...OpenSearchProvisioningV2APIOption) Router {
	controller := &OpenSearchProvisioningV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OpenSearchProvisioningV2APIController
func (c *OpenSearchProvisioningV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/applications/opensearch/clusters/v2/{clusterId}/list-backups/v2/",
			c.ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get,
		},
		"ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/opensearch/clusters/v2/{clusterId}/trigger-backup/v2/",
			c.ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post,
		},
		"ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/opensearch/restore/v2",
			c.ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/opensearch/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/opensearch/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/opensearch/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/opensearch/clusters/v2/",
			c.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get - List recent cluster backup events.
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post - Manually trigger cluster backup.
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post - Trigger a OpenSearch Cluster Restore
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post(w http.ResponseWriter, r *http.Request) {
	openSearchClusterRestoreV2Param := OpenSearchClusterRestoreV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&openSearchClusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOpenSearchClusterRestoreV2Required(openSearchClusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOpenSearchClusterRestoreV2Constraints(openSearchClusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post(r.Context(), openSearchClusterRestoreV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete - Delete cluster
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet - Get OpenSearch cluster details
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut - Update a OpenSearch cluster
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	openSearchClusterUpdateV2Param := OpenSearchClusterUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&openSearchClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOpenSearchClusterUpdateV2Required(openSearchClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOpenSearchClusterUpdateV2Constraints(openSearchClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut(r.Context(), clusterIdParam, openSearchClusterUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post - Create an OpenSearch cluster
func (c *OpenSearchProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post(w http.ResponseWriter, r *http.Request) {
	openSearchClusterV2Param := OpenSearchClusterV2{}
	d := json.NewDecoder(r.Body)
	//d.DisallowUnknownFields()
	if err := d.Decode(&openSearchClusterV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOpenSearchClusterV2Required(openSearchClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOpenSearchClusterV2Constraints(openSearchClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post(r.Context(), openSearchClusterV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
