/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OpenSearchEgressRulesV2APIController binds http requests to an api service and writes the service results to the http response
type OpenSearchEgressRulesV2APIController struct {
	service      OpenSearchEgressRulesV2APIServicer
	errorHandler ErrorHandler
}

// OpenSearchEgressRulesV2APIOption for how the controller is set up.
type OpenSearchEgressRulesV2APIOption func(*OpenSearchEgressRulesV2APIController)

// WithOpenSearchEgressRulesV2APIErrorHandler inject ErrorHandler into controller
func WithOpenSearchEgressRulesV2APIErrorHandler(h ErrorHandler) OpenSearchEgressRulesV2APIOption {
	return func(c *OpenSearchEgressRulesV2APIController) {
		c.errorHandler = h
	}
}

// NewOpenSearchEgressRulesV2APIController creates a default api controller
func NewOpenSearchEgressRulesV2APIController(s OpenSearchEgressRulesV2APIServicer, opts ...OpenSearchEgressRulesV2APIOption) Router {
	controller := &OpenSearchEgressRulesV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OpenSearchEgressRulesV2APIController
func (c *OpenSearchEgressRulesV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesOpensearchClusterClusterIdEgressRulesV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/opensearch_cluster/{clusterId}/egress-rules/v2/",
			c.ClusterManagementV2DataSourcesOpensearchClusterClusterIdEgressRulesV2Get,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/opensearch/egress-rules/v2/{egressRuleId}",
			c.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/opensearch/egress-rules/v2/{egressRuleId}",
			c.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/opensearch/egress-rules/v2",
			c.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesOpensearchClusterClusterIdEgressRulesV2Get - List all OpenSearch egress rules
func (c *OpenSearchEgressRulesV2APIController) ClusterManagementV2DataSourcesOpensearchClusterClusterIdEgressRulesV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesOpensearchClusterClusterIdEgressRulesV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdDelete - Remove an existing egress rule for a given channel/destination ID
func (c *OpenSearchEgressRulesV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	egressRuleIdParam := params["egressRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdDelete(r.Context(), egressRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdGet - Retrieve an existing egress rule
func (c *OpenSearchEgressRulesV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	egressRuleIdParam := params["egressRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2EgressRuleIdGet(r.Context(), egressRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2Post - Add egress firewall rules for a notifications/alerting webhook
func (c *OpenSearchEgressRulesV2APIController) ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2Post(w http.ResponseWriter, r *http.Request) {
	openSearchEgressRuleV2Param := OpenSearchEgressRuleV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&openSearchEgressRuleV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOpenSearchEgressRuleV2Required(openSearchEgressRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOpenSearchEgressRuleV2Constraints(openSearchEgressRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsOpensearchEgressRulesV2Post(r.Context(), openSearchEgressRuleV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
