/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// AzureVnetPeerSummaryV2 -
type AzureVnetPeerSummaryV2 struct {

	// The name of the VPC Network you wish to peer to.
	PeerVirtualNetworkName string `json:"peerVirtualNetworkName"`

	// The subnets for the peering VPC.
	PeerSubnets []string `json:"peerSubnets"`

	// Name of the Vpc Peering Connection.
	Name string `json:"name,omitempty"`

	// ID of the Active Directory Object to give peering permissions to, required for cross subscription peering.
	PeerAdObjectId string `json:"peerAdObjectId,omitempty"`

	// ID of the VPC peering connection.
	Id string `json:"id,omitempty"`

	// Resource Group Name of the Virtual Network.
	PeerResourceGroup string `json:"peerResourceGroup"`

	// Subscription ID of the Virtual Network.
	PeerSubscriptionId string `json:"peerSubscriptionId"`

	// ID of the Cluster Data Centre.
	CdcId string `json:"cdcId"`
}

// AssertAzureVnetPeerSummaryV2Required checks if the required fields are not zero-ed
func AssertAzureVnetPeerSummaryV2Required(obj AzureVnetPeerSummaryV2) error {
	elements := map[string]interface{}{
		"peerVirtualNetworkName": obj.PeerVirtualNetworkName,
		"peerSubnets":            obj.PeerSubnets,
		"peerResourceGroup":      obj.PeerResourceGroup,
		"peerSubscriptionId":     obj.PeerSubscriptionId,
		"cdcId":                  obj.CdcId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseAzureVnetPeerSummaryV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of AzureVnetPeerSummaryV2 (e.g. [][]AzureVnetPeerSummaryV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAzureVnetPeerSummaryV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAzureVnetPeerSummaryV2, ok := obj.(AzureVnetPeerSummaryV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAzureVnetPeerSummaryV2Required(aAzureVnetPeerSummaryV2)
	})
}
