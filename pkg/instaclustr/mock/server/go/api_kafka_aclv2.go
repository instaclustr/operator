/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KafkaACLV2ApiController binds http requests to an api service and writes the service results to the http response
type KafkaACLV2ApiController struct {
	service      KafkaACLV2ApiServicer
	errorHandler ErrorHandler
}

// KafkaACLV2ApiOption for how the controller is set up.
type KafkaACLV2ApiOption func(*KafkaACLV2ApiController)

// WithKafkaACLV2ApiErrorHandler inject ErrorHandler into controller
func WithKafkaACLV2ApiErrorHandler(h ErrorHandler) KafkaACLV2ApiOption {
	return func(c *KafkaACLV2ApiController) {
		c.errorHandler = h
	}
}

// NewKafkaACLV2ApiController creates a default api controller
func NewKafkaACLV2ApiController(s KafkaACLV2ApiServicer, opts ...KafkaACLV2ApiOption) Router {
	controller := &KafkaACLV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KafkaACLV2ApiController
func (c *KafkaACLV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_cluster/{clusterId}/acls/v2/",
			c.ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get - List all ACLs in the Kafka cluster.
func (c *KafkaACLV2ApiController) ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete - Delete all ACLs associated with a principal.
func (c *KafkaACLV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete(r.Context(), kafkaAclIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet - Get list of Kafka ACLs for a given principal.
func (c *KafkaACLV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet(r.Context(), kafkaAclIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut - Update ACL list for a principal.
func (c *KafkaACLV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]

	bodyParam := KafkaAclListV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaAclListV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut(r.Context(), kafkaAclIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post - Create a Kafka ACL.
func (c *KafkaACLV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := KafkaAclListV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaAclListV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
