/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaConnectMirrorSourceClusterDetailsV2 - Details to connect to the source kafka cluster.
type KafkaConnectMirrorSourceClusterDetailsV2 struct {

	// Alias to use for the source kafka cluster. This will be used to rename topics if renameMirroredTopics is turned on
	Alias string `json:"alias"`

	// Details to connect to a Non-Instaclustr managed cluster. Cannot be provided if targeting an Instaclustr managed cluster.
	ExternalCluster []KafkaConnectExternalSourceClusterDetailsV2 `json:"externalCluster,omitempty"`

	// Details to connect to a Instaclustr managed cluster. Cannot be provided if targeting a non-Instaclustr managed cluster.
	ManagedCluster []KafkaConnectManagedSourceClusterDetailsV2 `json:"managedCluster,omitempty"`
}

// AssertKafkaConnectMirrorSourceClusterDetailsV2Required checks if the required fields are not zero-ed
func AssertKafkaConnectMirrorSourceClusterDetailsV2Required(obj KafkaConnectMirrorSourceClusterDetailsV2) error {
	elements := map[string]interface{}{
		"alias": obj.Alias,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.ExternalCluster {
		if err := AssertKafkaConnectExternalSourceClusterDetailsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ManagedCluster {
		if err := AssertKafkaConnectManagedSourceClusterDetailsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseKafkaConnectMirrorSourceClusterDetailsV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaConnectMirrorSourceClusterDetailsV2 (e.g. [][]KafkaConnectMirrorSourceClusterDetailsV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaConnectMirrorSourceClusterDetailsV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaConnectMirrorSourceClusterDetailsV2, ok := obj.(KafkaConnectMirrorSourceClusterDetailsV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaConnectMirrorSourceClusterDetailsV2Required(aKafkaConnectMirrorSourceClusterDetailsV2)
	})
}
