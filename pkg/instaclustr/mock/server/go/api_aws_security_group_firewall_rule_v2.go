/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AWSSecurityGroupFirewallRuleV2APIController binds http requests to an api service and writes the service results to the http response
type AWSSecurityGroupFirewallRuleV2APIController struct {
	service      AWSSecurityGroupFirewallRuleV2APIServicer
	errorHandler ErrorHandler
}

// AWSSecurityGroupFirewallRuleV2APIOption for how the controller is set up.
type AWSSecurityGroupFirewallRuleV2APIOption func(*AWSSecurityGroupFirewallRuleV2APIController)

// WithAWSSecurityGroupFirewallRuleV2APIErrorHandler inject ErrorHandler into controller
func WithAWSSecurityGroupFirewallRuleV2APIErrorHandler(h ErrorHandler) AWSSecurityGroupFirewallRuleV2APIOption {
	return func(c *AWSSecurityGroupFirewallRuleV2APIController) {
		c.errorHandler = h
	}
}

// NewAWSSecurityGroupFirewallRuleV2APIController creates a default api controller
func NewAWSSecurityGroupFirewallRuleV2APIController(s AWSSecurityGroupFirewallRuleV2APIServicer, opts ...AWSSecurityGroupFirewallRuleV2APIOption) Router {
	controller := &AWSSecurityGroupFirewallRuleV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AWSSecurityGroupFirewallRuleV2APIController
func (c *AWSSecurityGroupFirewallRuleV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesProvidersAwsAwsClusterClusterIdSecurityGroupFirewallRulesV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/aws/aws_cluster/{clusterId}/security-group-firewall-rules/v2",
			c.ClusterManagementV2DataSourcesProvidersAwsAwsClusterClusterIdSecurityGroupFirewallRulesV2Get,
		},
		"ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/aws/security-group-firewall-rules/v2/{firewallRuleId}",
			c.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdDelete,
		},
		"ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/aws/security-group-firewall-rules/v2/{firewallRuleId}",
			c.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdGet,
		},
		"ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/aws/security-group-firewall-rules/v2",
			c.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersAwsAwsClusterClusterIdSecurityGroupFirewallRulesV2Get - List all security group firewall rules
func (c *AWSSecurityGroupFirewallRuleV2APIController) ClusterManagementV2DataSourcesProvidersAwsAwsClusterClusterIdSecurityGroupFirewallRulesV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesProvidersAwsAwsClusterClusterIdSecurityGroupFirewallRulesV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdDelete - Delete AWS security group firewall rule
func (c *AWSSecurityGroupFirewallRuleV2APIController) ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	firewallRuleIdParam := params["firewallRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdDelete(r.Context(), firewallRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdGet - Get AWS security group firewall rule details
func (c *AWSSecurityGroupFirewallRuleV2APIController) ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	firewallRuleIdParam := params["firewallRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2FirewallRuleIdGet(r.Context(), firewallRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2Post - Add an AWS security group firewall rule
func (c *AWSSecurityGroupFirewallRuleV2APIController) ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2Post(w http.ResponseWriter, r *http.Request) {
	awsSecurityGroupFirewallRuleV2Param := AwsSecurityGroupFirewallRuleV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&awsSecurityGroupFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsSecurityGroupFirewallRuleV2Required(awsSecurityGroupFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAwsSecurityGroupFirewallRuleV2Constraints(awsSecurityGroupFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsSecurityGroupFirewallRulesV2Post(r.Context(), awsSecurityGroupFirewallRuleV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
