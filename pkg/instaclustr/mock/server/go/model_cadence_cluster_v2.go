/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// CadenceClusterV2 - Definition of a managed Cadence cluster that can be provisioned in Instaclustr.
type CadenceClusterV2 struct {

	// Creates a PCI compliant cluster, see [PCI Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
	PciComplianceMode bool `json:"pciComplianceMode"`

	// Settings for SHARED provisioning. Must not be defined with STANDARD provisioning options.
	SharedProvisioning []CadenceSharedProvisioningV2 `json:"sharedProvisioning,omitempty"`

	//
	TwoFactorDelete []TwoFactorDeleteSettingsV2 `json:"twoFactorDelete,omitempty"`

	// Enable Authentication for Cadence Web
	UseCadenceWebAuth bool `json:"useCadenceWebAuth"`

	// List of data centre settings.
	DataCentres []CadenceDataCentreV2 `json:"dataCentres"`

	CurrentClusterOperationStatus CurrentClusterOperationStatusV2 `json:"currentClusterOperationStatus,omitempty"`

	// Version of Cadence to run on the cluster. Available versions: <ul> <li>`0.22.4`</li> <li>`0.24.0`</li> </ul>
	CadenceVersion string `json:"cadenceVersion"`

	// Settings for STARDARD provisioning. Must not be defined with SHARED provisioning options.
	StandardProvisioning []CadenceStandardProvisioningV2 `json:"standardProvisioning,omitempty"`

	// Creates the cluster with private network only, see [Private Network Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
	PrivateNetworkCluster bool `json:"privateNetworkCluster"`

	// Name of the cluster.
	Name string `json:"name"`

	// ID of the cluster.
	Id string `json:"id,omitempty"`

	SlaTier SlaTierV2 `json:"slaTier"`

	// Cadence AWS Archival settings
	AwsArchival []AwsArchivalV2 `json:"awsArchival,omitempty"`

	// Status of the cluster.
	Status string `json:"status,omitempty"`
}

// AssertCadenceClusterV2Required checks if the required fields are not zero-ed
func AssertCadenceClusterV2Required(obj CadenceClusterV2) error {
	elements := map[string]interface{}{
		"pciComplianceMode":     obj.PciComplianceMode,
		"useCadenceWebAuth":     obj.UseCadenceWebAuth,
		"dataCentres":           obj.DataCentres,
		"cadenceVersion":        obj.CadenceVersion,
		"privateNetworkCluster": obj.PrivateNetworkCluster,
		"name":                  obj.Name,
		"slaTier":               obj.SlaTier,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SharedProvisioning {
		if err := AssertCadenceSharedProvisioningV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TwoFactorDelete {
		if err := AssertTwoFactorDeleteSettingsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DataCentres {
		if err := AssertCadenceDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.StandardProvisioning {
		if err := AssertCadenceStandardProvisioningV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AwsArchival {
		if err := AssertAwsArchivalV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseCadenceClusterV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CadenceClusterV2 (e.g. [][]CadenceClusterV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCadenceClusterV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCadenceClusterV2, ok := obj.(CadenceClusterV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCadenceClusterV2Required(aCadenceClusterV2)
	})
}
