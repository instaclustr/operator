/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KafkaConnectClusterV2ApiController binds http requests to an api service and writes the service results to the http response
type KafkaConnectClusterV2ApiController struct {
	service      KafkaConnectClusterV2ApiServicer
	errorHandler ErrorHandler
}

// KafkaConnectClusterV2ApiOption for how the controller is set up.
type KafkaConnectClusterV2ApiOption func(*KafkaConnectClusterV2ApiController)

// WithKafkaConnectClusterV2ApiErrorHandler inject ErrorHandler into controller
func WithKafkaConnectClusterV2ApiErrorHandler(h ErrorHandler) KafkaConnectClusterV2ApiOption {
	return func(c *KafkaConnectClusterV2ApiController) {
		c.errorHandler = h
	}
}

// NewKafkaConnectClusterV2ApiController creates a default api controller
func NewKafkaConnectClusterV2ApiController(s KafkaConnectClusterV2ApiServicer, opts ...KafkaConnectClusterV2ApiOption) Router {
	controller := &KafkaConnectClusterV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KafkaConnectClusterV2ApiController
func (c *KafkaConnectClusterV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2OperationsApplicationsKafkaConnectClustersV2ClusterIdSyncCustomKafkaConnectorsV2Put",
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/applications/kafka-connect/clusters/v2/{clusterId}/sync-custom-kafka-connectors/v2",
			c.ClusterManagementV2OperationsApplicationsKafkaConnectClustersV2ClusterIdSyncCustomKafkaConnectorsV2Put,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka-connect/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdDelete,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka-connect/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdGet,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka-connect/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdPut,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka-connect/clusters/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2Post,
		},
	}
}

// ClusterManagementV2OperationsApplicationsKafkaConnectClustersV2ClusterIdSyncCustomKafkaConnectorsV2Put - Update the custom connectors of a Kafka Connect cluster.
func (c *KafkaConnectClusterV2ApiController) ClusterManagementV2OperationsApplicationsKafkaConnectClustersV2ClusterIdSyncCustomKafkaConnectorsV2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2OperationsApplicationsKafkaConnectClustersV2ClusterIdSyncCustomKafkaConnectorsV2Put(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdDelete - Delete Kafka connect Cluster
func (c *KafkaConnectClusterV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdGet - Get Kafka connect cluster details
func (c *KafkaConnectClusterV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdPut - Update a Kafka connect cluster
func (c *KafkaConnectClusterV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	bodyParam := KafkaConnectClusterUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaConnectClusterUpdateV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2ClusterIdPut(r.Context(), clusterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2Post - Create a Kafka connect cluster.
func (c *KafkaConnectClusterV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := KafkaConnectClusterV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaConnectClusterV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaConnectClustersV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
