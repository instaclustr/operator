/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ClusterExclusionWindowV2APIController binds http requests to an api service and writes the service results to the http response
type ClusterExclusionWindowV2APIController struct {
	service      ClusterExclusionWindowV2APIServicer
	errorHandler ErrorHandler
}

// ClusterExclusionWindowV2APIOption for how the controller is set up.
type ClusterExclusionWindowV2APIOption func(*ClusterExclusionWindowV2APIController)

// WithClusterExclusionWindowV2APIErrorHandler inject ErrorHandler into controller
func WithClusterExclusionWindowV2APIErrorHandler(h ErrorHandler) ClusterExclusionWindowV2APIOption {
	return func(c *ClusterExclusionWindowV2APIController) {
		c.errorHandler = h
	}
}

// NewClusterExclusionWindowV2APIController creates a default api controller
func NewClusterExclusionWindowV2APIController(s ClusterExclusionWindowV2APIServicer, opts ...ClusterExclusionWindowV2APIOption) Router {
	controller := &ClusterExclusionWindowV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ClusterExclusionWindowV2APIController
func (c *ClusterExclusionWindowV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesClusterClusterIdExclusionWindowsV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster/{clusterId}/exclusion-windows/v2",
			c.ClusterManagementV2DataSourcesClusterClusterIdExclusionWindowsV2Get,
		},
		"ClusterManagementV2ResourcesExclusionWindowsV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/exclusion-windows/v2",
			c.ClusterManagementV2ResourcesExclusionWindowsV2Post,
		},
		"ClusterManagementV2ResourcesExclusionWindowsV2WindowIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/exclusion-windows/v2/{windowId}",
			c.ClusterManagementV2ResourcesExclusionWindowsV2WindowIdDelete,
		},
		"ClusterManagementV2ResourcesExclusionWindowsV2WindowIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/exclusion-windows/v2/{windowId}",
			c.ClusterManagementV2ResourcesExclusionWindowsV2WindowIdGet,
		},
	}
}

// ClusterManagementV2DataSourcesClusterClusterIdExclusionWindowsV2Get - List cluster exclusion windows
func (c *ClusterExclusionWindowV2APIController) ClusterManagementV2DataSourcesClusterClusterIdExclusionWindowsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesClusterClusterIdExclusionWindowsV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesExclusionWindowsV2Post - Create cluster exclusion window
func (c *ClusterExclusionWindowV2APIController) ClusterManagementV2ResourcesExclusionWindowsV2Post(w http.ResponseWriter, r *http.Request) {
	clusterExclusionWindowV2Param := ClusterExclusionWindowV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clusterExclusionWindowV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClusterExclusionWindowV2Required(clusterExclusionWindowV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClusterExclusionWindowV2Constraints(clusterExclusionWindowV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesExclusionWindowsV2Post(r.Context(), clusterExclusionWindowV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesExclusionWindowsV2WindowIdDelete - Delete cluster exclusion window
func (c *ClusterExclusionWindowV2APIController) ClusterManagementV2ResourcesExclusionWindowsV2WindowIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	windowIdParam := params["windowId"]
	result, err := c.service.ClusterManagementV2ResourcesExclusionWindowsV2WindowIdDelete(r.Context(), windowIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesExclusionWindowsV2WindowIdGet - Get cluster exclusion window details
func (c *ClusterExclusionWindowV2APIController) ClusterManagementV2ResourcesExclusionWindowsV2WindowIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	windowIdParam := params["windowId"]
	result, err := c.service.ClusterManagementV2ResourcesExclusionWindowsV2WindowIdGet(r.Context(), windowIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
