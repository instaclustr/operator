/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// AwsVpcPeerV2 - Definition of an AWS VPC Peering request to allow privately routed connections to a target data centre.
type AwsVpcPeerV2 struct {

	// The AWS account ID of the owner of the accepter VPC.
	PeerAwsAccountId string `json:"peerAwsAccountId"`

	// The subnets for the peering VPC.
	PeerSubnets []string `json:"peerSubnets"`

	// ID of the VPC with which the peering connection is created.
	PeerVpcId string `json:"peerVpcId"`

	// ID of the VPC peering connection.
	Id string `json:"id,omitempty"`

	// ID of the current data centre VPC.
	DataCentreVpcId string `json:"dataCentreVpcId,omitempty"`

	// Region code for the accepter VPC.
	PeerRegion string `json:"peerRegion"`

	// Status of the VPC Peering Connection. Values can be `pending-acceptance`, `failed`, `expired`, `provisioning`, `active`, `deleting`, `deleted` or `rejected`.
	StatusCode string `json:"statusCode,omitempty"`

	// ID of the Cluster Data Centre
	CdcId string `json:"cdcId"`
}

// AssertAwsVpcPeerV2Required checks if the required fields are not zero-ed
func AssertAwsVpcPeerV2Required(obj AwsVpcPeerV2) error {
	elements := map[string]interface{}{
		"peerAwsAccountId": obj.PeerAwsAccountId,
		"peerSubnets":      obj.PeerSubnets,
		"peerVpcId":        obj.PeerVpcId,
		"peerRegion":       obj.PeerRegion,
		"cdcId":            obj.CdcId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertAwsVpcPeerV2Constraints checks if the values respects the defined constraints
func AssertAwsVpcPeerV2Constraints(obj AwsVpcPeerV2) error {
	return nil
}
