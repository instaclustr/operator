/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// DataCentreRequest - Definition of a data centre to be created within a cluster. Any fields left blank will use the values provided in the ClusterProvisioningRequest top level object Currently only APACHE_CASSANDRA supports multiple data centres. If overriding the bundles you must specify APACHE_CASSANDRA (and LUCENE - if specified at top level) at the same version. SPARK can only be defined on one data centre
type DataCentreRequest struct {
	Provider Provider `json:"provider,omitempty"`

	DataCentre string `json:"dataCentre"`

	// A logical name for the data centre within a Cassandra cluster. These names must be unique in the cluster.  Cannot be changed once created. If not provided will default to the region
	Name string `json:"name,omitempty"`

	// The private network address block for the cluster specified using CIDR address notation. The network must have a prefix length between /12 and /22, must be part of a private address space and must not intersect with another data centre
	Network string `json:"network"`

	NodeSize string `json:"nodeSize,omitempty"`

	RackAllocation RackAllocation `json:"rackAllocation,omitempty"`
}

// AssertDataCentreRequestRequired checks if the required fields are not zero-ed
func AssertDataCentreRequestRequired(obj DataCentreRequest) error {
	elements := map[string]interface{}{
		"dataCentre": obj.DataCentre,
		"network":    obj.Network,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertProviderRequired(obj.Provider); err != nil {
		return err
	}
	if err := AssertRackAllocationRequired(obj.RackAllocation); err != nil {
		return err
	}
	return nil
}

// AssertDataCentreRequestConstraints checks if the values respects the defined constraints
func AssertDataCentreRequestConstraints(obj DataCentreRequest) error {
	return nil
}
