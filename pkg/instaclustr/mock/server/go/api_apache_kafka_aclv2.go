/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApacheKafkaACLV2APIController binds http requests to an api service and writes the service results to the http response
type ApacheKafkaACLV2APIController struct {
	service      ApacheKafkaACLV2APIServicer
	errorHandler ErrorHandler
}

// ApacheKafkaACLV2APIOption for how the controller is set up.
type ApacheKafkaACLV2APIOption func(*ApacheKafkaACLV2APIController)

// WithApacheKafkaACLV2APIErrorHandler inject ErrorHandler into controller
func WithApacheKafkaACLV2APIErrorHandler(h ErrorHandler) ApacheKafkaACLV2APIOption {
	return func(c *ApacheKafkaACLV2APIController) {
		c.errorHandler = h
	}
}

// NewApacheKafkaACLV2APIController creates a default api controller
func NewApacheKafkaACLV2APIController(s ApacheKafkaACLV2APIServicer, opts ...ApacheKafkaACLV2APIOption) Router {
	controller := &ApacheKafkaACLV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApacheKafkaACLV2APIController
func (c *ApacheKafkaACLV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_cluster/{clusterId}/acls/v2/",
			c.ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}/",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}/",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/{kafkaAclId}/",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/acls/v2/",
			c.ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get - List all ACLs in the Kafka cluster.
func (c *ApacheKafkaACLV2APIController) ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesKafkaClusterClusterIdAclsV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete - Delete all ACLs associated with a principal.
func (c *ApacheKafkaACLV2APIController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdDelete(r.Context(), kafkaAclIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet - Get list of Kafka ACLs for a given principal.
func (c *ApacheKafkaACLV2APIController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdGet(r.Context(), kafkaAclIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut - Update ACL list for a principal.
func (c *ApacheKafkaACLV2APIController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaAclIdParam := params["kafkaAclId"]
	kafkaAclListV2Param := KafkaAclListV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaAclListV2Required(kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaAclListV2Constraints(kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2KafkaAclIdPut(r.Context(), kafkaAclIdParam, kafkaAclListV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post - Create a Kafka ACL.
func (c *ApacheKafkaACLV2APIController) ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post(w http.ResponseWriter, r *http.Request) {
	kafkaAclListV2Param := KafkaAclListV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaAclListV2Required(kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaAclListV2Constraints(kafkaAclListV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaAclsV2Post(r.Context(), kafkaAclListV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
