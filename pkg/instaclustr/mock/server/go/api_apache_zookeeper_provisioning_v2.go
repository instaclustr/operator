/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApacheZookeeperProvisioningV2APIController binds http requests to an api service and writes the service results to the http response
type ApacheZookeeperProvisioningV2APIController struct {
	service      ApacheZookeeperProvisioningV2APIServicer
	errorHandler ErrorHandler
}

// ApacheZookeeperProvisioningV2APIOption for how the controller is set up.
type ApacheZookeeperProvisioningV2APIOption func(*ApacheZookeeperProvisioningV2APIController)

// WithApacheZookeeperProvisioningV2APIErrorHandler inject ErrorHandler into controller
func WithApacheZookeeperProvisioningV2APIErrorHandler(h ErrorHandler) ApacheZookeeperProvisioningV2APIOption {
	return func(c *ApacheZookeeperProvisioningV2APIController) {
		c.errorHandler = h
	}
}

// NewApacheZookeeperProvisioningV2APIController creates a default api controller
func NewApacheZookeeperProvisioningV2APIController(s ApacheZookeeperProvisioningV2APIServicer, opts ...ApacheZookeeperProvisioningV2APIOption) Router {
	controller := &ApacheZookeeperProvisioningV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApacheZookeeperProvisioningV2APIController
func (c *ApacheZookeeperProvisioningV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/zookeeper/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/zookeeper/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsZookeeperClustersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/zookeeper/clusters/v2",
			c.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2Post,
		},
	}
}

// ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdDelete - Delete cluster
func (c *ApacheZookeeperProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdGet - Get Zookeeper cluster details.
func (c *ApacheZookeeperProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsZookeeperClustersV2Post - Create a Zookeeper cluster.
func (c *ApacheZookeeperProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsZookeeperClustersV2Post(w http.ResponseWriter, r *http.Request) {
	apacheZookeeperClusterV2Param := ApacheZookeeperClusterV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apacheZookeeperClusterV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApacheZookeeperClusterV2Required(apacheZookeeperClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApacheZookeeperClusterV2Constraints(apacheZookeeperClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsZookeeperClustersV2Post(r.Context(), apacheZookeeperClusterV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
