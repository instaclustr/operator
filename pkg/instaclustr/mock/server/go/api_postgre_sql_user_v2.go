/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgreSQLUserV2APIController binds http requests to an api service and writes the service results to the http response
type PostgreSQLUserV2APIController struct {
	service      PostgreSQLUserV2APIServicer
	errorHandler ErrorHandler
}

// PostgreSQLUserV2APIOption for how the controller is set up.
type PostgreSQLUserV2APIOption func(*PostgreSQLUserV2APIController)

// WithPostgreSQLUserV2APIErrorHandler inject ErrorHandler into controller
func WithPostgreSQLUserV2APIErrorHandler(h ErrorHandler) PostgreSQLUserV2APIOption {
	return func(c *PostgreSQLUserV2APIController) {
		c.errorHandler = h
	}
}

// NewPostgreSQLUserV2APIController creates a default api controller
func NewPostgreSQLUserV2APIController(s PostgreSQLUserV2APIServicer, opts ...PostgreSQLUserV2APIOption) Router {
	controller := &PostgreSQLUserV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgreSQLUserV2APIController
func (c *PostgreSQLUserV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/applications/postgresql/clusters/v2/{clusterId}/update-default-user-password",
			c.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut,
		},
	}
}

// ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut - Update the default PostgreSQL user password.
func (c *PostgreSQLUserV2APIController) ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	postgresqlUserSummaryParam := PostgresqlUserSummary{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postgresqlUserSummaryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlUserSummaryRequired(postgresqlUserSummaryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostgresqlUserSummaryConstraints(postgresqlUserSummaryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut(r.Context(), clusterIdParam, postgresqlUserSummaryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
