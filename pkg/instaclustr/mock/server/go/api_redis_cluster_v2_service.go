/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// RedisClusterV2ApiService is a service that implements the logic for the RedisClusterV2ApiServicer
// This service should implement the business logic for every endpoint for the RedisClusterV2Api API.
// Include any external packages or services that will be required by this service.
type RedisClusterV2ApiService struct {
	MockRedisCluster *RedisClusterV2
}

// NewRedisClusterV2ApiService creates a default api service
func NewRedisClusterV2ApiService() RedisClusterV2ApiServicer {
	return &RedisClusterV2ApiService{}
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete - Delete cluster
func (s *RedisClusterV2ApiService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete with the required logic for this service method.
	// Add api_redis_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	s.MockRedisCluster = nil
	return Response(204, nil), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet - Get Redis cluster details.
func (s *RedisClusterV2ApiService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet with the required logic for this service method.
	// Add api_redis_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	if s.MockRedisCluster != nil {
		s.MockRedisCluster.Status = RUNNING
	} else {
		return Response(404, nil), nil
	}

	return Response(200, s.MockRedisCluster), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut - Update Redis Cluster Details
func (s *RedisClusterV2ApiService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut(ctx context.Context, clusterId string, body RedisClusterUpdateV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut with the required logic for this service method.
	// Add api_redis_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	newNode := []NodeDetailsV2{{
		Rack:          "us-east-1a",
		NodeSize:      body.DataCentres[0].NodeSize,
		PublicAddress: "54.146.160.89",
	}}

	s.MockRedisCluster.DataCentres[0].Nodes = newNode

	return Response(202, nil), nil

	//TODO: Uncomment the next line to return response Response(404, ErrorListResponseV2{}) or use other options such as http.Ok ...
	//return Response(404, ErrorListResponseV2{}), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2Post - Create a Redis Cluster
func (s *RedisClusterV2ApiService) ClusterManagementV2ResourcesApplicationsRedisClustersV2Post(ctx context.Context, body RedisClusterV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2Post with the required logic for this service method.
	// Add api_redis_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	s.MockRedisCluster = &body
	s.MockRedisCluster.Id = CreatedID
	return Response(202, s.MockRedisCluster), nil
}
