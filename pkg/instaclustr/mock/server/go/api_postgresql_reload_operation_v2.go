/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgresqlReloadOperationV2ApiController binds http requests to an api service and writes the service results to the http response
type PostgresqlReloadOperationV2ApiController struct {
	service      PostgresqlReloadOperationV2ApiServicer
	errorHandler ErrorHandler
}

// PostgresqlReloadOperationV2ApiOption for how the controller is set up.
type PostgresqlReloadOperationV2ApiOption func(*PostgresqlReloadOperationV2ApiController)

// WithPostgresqlReloadOperationV2ApiErrorHandler inject ErrorHandler into controller
func WithPostgresqlReloadOperationV2ApiErrorHandler(h ErrorHandler) PostgresqlReloadOperationV2ApiOption {
	return func(c *PostgresqlReloadOperationV2ApiController) {
		c.errorHandler = h
	}
}

// NewPostgresqlReloadOperationV2ApiController creates a default api controller
func NewPostgresqlReloadOperationV2ApiController(s PostgresqlReloadOperationV2ApiServicer, opts ...PostgresqlReloadOperationV2ApiOption) Router {
	controller := &PostgresqlReloadOperationV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgresqlReloadOperationV2ApiController
func (c *PostgresqlReloadOperationV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/applications/postgresql/clusters/v2/{clusterId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet,
		},
		{
			"ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/operations/applications/postgresql/nodes/v2/{nodeId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet,
		},
		{
			"ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost",
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/postgresql/nodes/v2/{nodeId}/reload",
			c.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost,
		},
	}
}

// ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet - Get cluster reload operations
func (c *PostgresqlReloadOperationV2ApiController) ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdReloadGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet - Get node reload operation
func (c *PostgresqlReloadOperationV2ApiController) ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nodeIdParam := params["nodeId"]

	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadGet(r.Context(), nodeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost - Trigger a node reload operation
func (c *PostgresqlReloadOperationV2ApiController) ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nodeIdParam := params["nodeId"]

	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlNodesV2NodeIdReloadPost(r.Context(), nodeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
