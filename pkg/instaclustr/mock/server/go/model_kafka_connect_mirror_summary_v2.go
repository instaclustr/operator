/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaConnectMirrorSummaryV2 - Summary of a Mirrors within a Kafka Connect Cluster. Root type for KafkaConnectMirrorV2
type KafkaConnectMirrorSummaryV2 struct {

	// The latency in milliseconds above which this mirror will be considered out of sync. It can not be less than 1000ms. The suggested initial latency is 30000ms  for connectors to be created.
	TargetLatency int32 `json:"targetLatency"`

	// ID of the kafka connect cluster
	KafkaConnectClusterId string `json:"kafkaConnectClusterId"`

	// Details to connect to the source kafka cluster
	SourceCluster []KafkaConnectMirrorSourceClusterDetailsV2 `json:"sourceCluster"`

	// Maximum number of tasks for Kafka Connect to use. Should be greater than 0.
	MaxTasks int32 `json:"maxTasks"`

	// Whether to rename topics as they are mirrored, by prefixing the sourceCluster.alias to the topic name.
	RenameMirroredTopics bool `json:"renameMirroredTopics"`

	// Name of the mirror connector. The value of this property has the form: [source-cluster].[target-cluster].[random-string]
	ConnectorName string `json:"connectorName,omitempty"`

	// ID of the mirror
	Id string `json:"id,omitempty"`

	// Regex to select which topics to mirror.
	TopicsRegex string `json:"topicsRegex"`
}

// AssertKafkaConnectMirrorSummaryV2Required checks if the required fields are not zero-ed
func AssertKafkaConnectMirrorSummaryV2Required(obj KafkaConnectMirrorSummaryV2) error {
	elements := map[string]interface{}{
		"targetLatency":         obj.TargetLatency,
		"kafkaConnectClusterId": obj.KafkaConnectClusterId,
		"sourceCluster":         obj.SourceCluster,
		"maxTasks":              obj.MaxTasks,
		"renameMirroredTopics":  obj.RenameMirroredTopics,
		"topicsRegex":           obj.TopicsRegex,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.SourceCluster {
		if err := AssertKafkaConnectMirrorSourceClusterDetailsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseKafkaConnectMirrorSummaryV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaConnectMirrorSummaryV2 (e.g. [][]KafkaConnectMirrorSummaryV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaConnectMirrorSummaryV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaConnectMirrorSummaryV2, ok := obj.(KafkaConnectMirrorSummaryV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaConnectMirrorSummaryV2Required(aKafkaConnectMirrorSummaryV2)
	})
}
