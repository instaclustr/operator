/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// CassandraClusterV2ApiService is a service that implements the logic for the CassandraClusterV2ApiServicer
// This service should implement the business logic for every endpoint for the CassandraClusterV2Api API.
// Include any external packages or services that will be required by this service.
type CassandraClusterV2ApiService struct {
	MockCassandraClusters []*CassandraClusterV2
}

// NewCassandraClusterV2ApiService creates a default api service
func NewCassandraClusterV2ApiService() CassandraClusterV2ApiServicer {
	return &CassandraClusterV2ApiService{}
}

// ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdDelete - Delete cluster
func (s *CassandraClusterV2ApiService) ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdDelete(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdDelete with the required logic for this service method.
	// Add api_cassandra_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	c := s.getCluster(clusterId)
	if c == nil {
		return Response(http.StatusNotFound, nil), nil
	}

	c = nil

	return Response(http.StatusNoContent, nil), nil
}

// ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdGet - Get Cassandra cluster details.
func (s *CassandraClusterV2ApiService) ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdGet(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdGet with the required logic for this service method.
	// Add api_cassandra_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	c := s.getCluster(clusterId)
	if c == nil {
		return Response(http.StatusNotFound, nil), nil
	}

	c.Status = RUNNING

	return Response(http.StatusOK, c), nil
}

// ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdPut - Update Cassandra Cluster Details
func (s *CassandraClusterV2ApiService) ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdPut(ctx context.Context, clusterId string, body CassandraClusterUpdateV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsCassandraClustersV2ClusterIdPut with the required logic for this service method.
	// Add api_cassandra_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	c := s.getCluster(clusterId)
	if c == nil {
		return Response(404, nil), nil
	}

	newNode := []NodeDetailsV2{{
		Rack:          "us-east-1a",
		NodeSize:      body.DataCentres[0].NodeSize,
		PublicAddress: "54.146.160.89",
	}}

	c.DataCentres[0].Nodes = newNode

	return Response(http.StatusAccepted, nil), nil
}

// ClusterManagementV2ResourcesApplicationsCassandraClustersV2Post - Create a Cassandra cluster.
func (s *CassandraClusterV2ApiService) ClusterManagementV2ResourcesApplicationsCassandraClustersV2Post(ctx context.Context, body CassandraClusterV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsCassandraClustersV2Post with the required logic for this service method.
	// Add api_cassandra_cluster_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	newCassandra := &CassandraClusterV2{}

	newCassandra = &body
	newCassandra.Id = body.Name + CreatedID
	newCassandra.DataCentres[0].Nodes = []NodeDetailsV2{{NodeSize: body.DataCentres[0].NodeSize}}

	s.MockCassandraClusters = append(s.MockCassandraClusters, newCassandra)

	return Response(http.StatusAccepted, newCassandra), nil
}

func (s *CassandraClusterV2ApiService) getCluster(clusterID string) *CassandraClusterV2 {
	for _, c := range s.MockCassandraClusters {
		if c.Id == clusterID {
			return c
		}
	}

	return nil
}
