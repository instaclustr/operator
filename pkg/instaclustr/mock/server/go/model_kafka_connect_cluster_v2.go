/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaConnectClusterV2 - Data type for kafka connect specific properties
type KafkaConnectClusterV2 struct {

	// List of data centre settings.
	DataCentres []KafkaConnectDataCentreV2 `json:"dataCentres"`

	CurrentClusterOperationStatus CurrentClusterOperationStatusV2 `json:"currentClusterOperationStatus,omitempty"`

	// Creates the cluster with private network only, see [Private Network Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
	PrivateNetworkCluster bool `json:"privateNetworkCluster"`

	// Version of Kafka connect to run on the cluster. Available versions: <ul> <li>`3.1.2`</li> <li>`3.0.2`</li> <li>`2.8.2`</li> <li>`2.7.1`</li> </ul>
	KafkaConnectVersion string `json:"kafkaConnectVersion"`

	// Details to connect to a target Kafka Cluster cluster.
	TargetCluster []KafkaConnectTargetClusterDetailsV2 `json:"targetCluster"`

	// Name of the cluster.
	Name string `json:"name"`

	// Defines the location for custom connector storage and access info.
	CustomConnectors []KafkaConnectCustomConnectorsV2 `json:"customConnectors,omitempty"`

	//
	TwoFactorDelete []TwoFactorDeleteSettingsV2 `json:"twoFactorDelete,omitempty"`

	// ID of the cluster.
	Id string `json:"id,omitempty"`

	SlaTier SlaTierV2 `json:"slaTier"`

	// Status of the cluster.
	Status string `json:"status,omitempty"`
}

// AssertKafkaConnectClusterV2Required checks if the required fields are not zero-ed
func AssertKafkaConnectClusterV2Required(obj KafkaConnectClusterV2) error {
	elements := map[string]interface{}{
		"dataCentres":           obj.DataCentres,
		"privateNetworkCluster": obj.PrivateNetworkCluster,
		"kafkaConnectVersion":   obj.KafkaConnectVersion,
		"targetCluster":         obj.TargetCluster,
		"name":                  obj.Name,
		"slaTier":               obj.SlaTier,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DataCentres {
		if err := AssertKafkaConnectDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TargetCluster {
		if err := AssertKafkaConnectTargetClusterDetailsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CustomConnectors {
		if err := AssertKafkaConnectCustomConnectorsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.TwoFactorDelete {
		if err := AssertTwoFactorDeleteSettingsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseKafkaConnectClusterV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaConnectClusterV2 (e.g. [][]KafkaConnectClusterV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaConnectClusterV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaConnectClusterV2, ok := obj.(KafkaConnectClusterV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaConnectClusterV2Required(aKafkaConnectClusterV2)
	})
}
