/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KafkaUserV2ApiController binds http requests to an api service and writes the service results to the http response
type KafkaUserV2ApiController struct {
	service      KafkaUserV2ApiServicer
	errorHandler ErrorHandler
}

// KafkaUserV2ApiOption for how the controller is set up.
type KafkaUserV2ApiOption func(*KafkaUserV2ApiController)

// WithKafkaUserV2ApiErrorHandler inject ErrorHandler into controller
func WithKafkaUserV2ApiErrorHandler(h ErrorHandler) KafkaUserV2ApiOption {
	return func(c *KafkaUserV2ApiController) {
		c.errorHandler = h
	}
}

// NewKafkaUserV2ApiController creates a default api controller
func NewKafkaUserV2ApiController(s KafkaUserV2ApiServicer, opts ...KafkaUserV2ApiOption) Router {
	controller := &KafkaUserV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KafkaUserV2ApiController
func (c *KafkaUserV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_cluster/{clusterId}/users/v2/",
			c.ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka/users/v2/{kafkaUserId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/users/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get - List all Kafka users.
func (c *KafkaUserV2ApiController) ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	result, err := c.service.ClusterManagementV2DataSourcesKafkaClusterClusterIdUsersV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete - Delete a Kafka user
func (c *KafkaUserV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdDelete(r.Context(), kafkaUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet - Get Kafka User details.
func (c *KafkaUserV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdGet(r.Context(), kafkaUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut - Update Kafka user password
func (c *KafkaUserV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaUserIdParam := params["kafkaUserId"]

	bodyParam := KafkaUserV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2KafkaUserIdPut(r.Context(), kafkaUserIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post - Create a Kafka User.
func (c *KafkaUserV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := KafkaUserV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaUserV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaUsersV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
