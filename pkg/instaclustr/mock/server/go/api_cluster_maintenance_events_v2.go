/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ClusterMaintenanceEventsV2APIController binds http requests to an api service and writes the service results to the http response
type ClusterMaintenanceEventsV2APIController struct {
	service      ClusterMaintenanceEventsV2APIServicer
	errorHandler ErrorHandler
}

// ClusterMaintenanceEventsV2APIOption for how the controller is set up.
type ClusterMaintenanceEventsV2APIOption func(*ClusterMaintenanceEventsV2APIController)

// WithClusterMaintenanceEventsV2APIErrorHandler inject ErrorHandler into controller
func WithClusterMaintenanceEventsV2APIErrorHandler(h ErrorHandler) ClusterMaintenanceEventsV2APIOption {
	return func(c *ClusterMaintenanceEventsV2APIController) {
		c.errorHandler = h
	}
}

// NewClusterMaintenanceEventsV2APIController creates a default api controller
func NewClusterMaintenanceEventsV2APIController(s ClusterMaintenanceEventsV2APIServicer, opts ...ClusterMaintenanceEventsV2APIOption) Router {
	controller := &ClusterMaintenanceEventsV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ClusterMaintenanceEventsV2APIController
func (c *ClusterMaintenanceEventsV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2InProgressV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster/{clusterId}/maintenance-events/v2/in-progress/v2/",
			c.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2InProgressV2Get,
		},
		"ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2PastV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster/{clusterId}/maintenance-events/v2/past/v2/",
			c.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2PastV2Get,
		},
		"ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2UpcomingV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster/{clusterId}/maintenance-events/v2/upcoming/v2/",
			c.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2UpcomingV2Get,
		},
		"ClusterManagementV2OperationsMaintenanceEventsMaintenanceEventIdV2RescheduleMaintenanceEventV2Put": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/maintenance-events/{maintenanceEventId}/v2/reschedule-maintenance-event/v2/",
			c.ClusterManagementV2OperationsMaintenanceEventsMaintenanceEventIdV2RescheduleMaintenanceEventV2Put,
		},
	}
}

// ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2InProgressV2Get -
func (c *ClusterMaintenanceEventsV2APIController) ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2InProgressV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2InProgressV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2PastV2Get -
func (c *ClusterMaintenanceEventsV2APIController) ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2PastV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2PastV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2UpcomingV2Get -
func (c *ClusterMaintenanceEventsV2APIController) ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2UpcomingV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesClusterClusterIdMaintenanceEventsV2UpcomingV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsMaintenanceEventsMaintenanceEventIdV2RescheduleMaintenanceEventV2Put - Reschedule a maintenance event
func (c *ClusterMaintenanceEventsV2APIController) ClusterManagementV2OperationsMaintenanceEventsMaintenanceEventIdV2RescheduleMaintenanceEventV2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	maintenanceEventIdParam := params["maintenanceEventId"]
	clusterMaintenanceEventScheduleUpdateV2Param := ClusterMaintenanceEventScheduleUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clusterMaintenanceEventScheduleUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClusterMaintenanceEventScheduleUpdateV2Required(clusterMaintenanceEventScheduleUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClusterMaintenanceEventScheduleUpdateV2Constraints(clusterMaintenanceEventScheduleUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsMaintenanceEventsMaintenanceEventIdV2RescheduleMaintenanceEventV2Put(r.Context(), maintenanceEventIdParam, clusterMaintenanceEventScheduleUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
