/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgreSQLProvisioningV2APIController binds http requests to an api service and writes the service results to the http response
type PostgreSQLProvisioningV2APIController struct {
	service      PostgreSQLProvisioningV2APIServicer
	errorHandler ErrorHandler
}

// PostgreSQLProvisioningV2APIOption for how the controller is set up.
type PostgreSQLProvisioningV2APIOption func(*PostgreSQLProvisioningV2APIController)

// WithPostgreSQLProvisioningV2APIErrorHandler inject ErrorHandler into controller
func WithPostgreSQLProvisioningV2APIErrorHandler(h ErrorHandler) PostgreSQLProvisioningV2APIOption {
	return func(c *PostgreSQLProvisioningV2APIController) {
		c.errorHandler = h
	}
}

// NewPostgreSQLProvisioningV2APIController creates a default api controller
func NewPostgreSQLProvisioningV2APIController(s PostgreSQLProvisioningV2APIServicer, opts ...PostgreSQLProvisioningV2APIOption) Router {
	controller := &PostgreSQLProvisioningV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgreSQLProvisioningV2APIController
func (c *PostgreSQLProvisioningV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesApplicationsPostgresqlClustersV2ClusterIdListBackupsV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/applications/postgresql/clusters/v2/{clusterId}/list-backups/v2/",
			c.ClusterManagementV2DataSourcesApplicationsPostgresqlClustersV2ClusterIdListBackupsV2Get,
		},
		"ClusterManagementV2OperationsApplicationsPostgresClustersV2ClusterIdTriggerBackupV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/postgres/clusters/v2/{clusterId}/trigger-backup/v2/",
			c.ClusterManagementV2OperationsApplicationsPostgresClustersV2ClusterIdTriggerBackupV2Post,
		},
		"ClusterManagementV2OperationsApplicationsPostgresRestoreV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/postgres/restore/v2",
			c.ClusterManagementV2OperationsApplicationsPostgresRestoreV2Post,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/postgresql/clusters/v2/{clusterId}/",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/postgresql/clusters/v2/{clusterId}/",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/postgresql/clusters/v2/{clusterId}/",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/postgresql/clusters/v2/",
			c.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesApplicationsPostgresqlClustersV2ClusterIdListBackupsV2Get - List recent cluster backup events.
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2DataSourcesApplicationsPostgresqlClustersV2ClusterIdListBackupsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesApplicationsPostgresqlClustersV2ClusterIdListBackupsV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsPostgresClustersV2ClusterIdTriggerBackupV2Post - Manually trigger cluster backup.
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2OperationsApplicationsPostgresClustersV2ClusterIdTriggerBackupV2Post(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresClustersV2ClusterIdTriggerBackupV2Post(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsPostgresRestoreV2Post - Trigger a PostgreSQL Cluster Restore
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2OperationsApplicationsPostgresRestoreV2Post(w http.ResponseWriter, r *http.Request) {
	clusterRestoreV2Param := ClusterRestoreV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClusterRestoreV2Required(clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClusterRestoreV2Constraints(clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresRestoreV2Post(r.Context(), clusterRestoreV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdDelete - Delete cluster
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdGet - Get Postgresql cluster details.
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdPut - Update PostgreSQL cluster details
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	postgresqlClusterUpdateV2Param := PostgresqlClusterUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postgresqlClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlClusterUpdateV2Required(postgresqlClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostgresqlClusterUpdateV2Constraints(postgresqlClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2ClusterIdPut(r.Context(), clusterIdParam, postgresqlClusterUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2Post - Create a Postgresql cluster.
func (c *PostgreSQLProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2Post(w http.ResponseWriter, r *http.Request) {
	postgresqlClusterV2Param := PostgresqlClusterV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&postgresqlClusterV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlClusterV2Required(postgresqlClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostgresqlClusterV2Constraints(postgresqlClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsPostgresqlClustersV2Post(r.Context(), postgresqlClusterV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
