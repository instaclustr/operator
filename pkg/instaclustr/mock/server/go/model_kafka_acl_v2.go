/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaAclV2 - Definition of a Kafka access control list.
type KafkaAclV2 struct {

	// Specifies the users(s) for which this ACL applies and can include the wildcard `*`. Valid values must start with \"User:\" including the wildcard.
	Principal string `json:"principal"`

	// Specifies whether to allow or deny the operation.
	PermissionType string `json:"permissionType"`

	// The IP address to which this ACL applies. It takes any string including the wildcard `*` for all IP addresses.
	Host string `json:"host"`

	// Indicates the resource-pattern-type
	PatternType string `json:"patternType"`

	// Any string that fits the resource name, e.g. topic name if the resource type is TOPIC
	ResourceName string `json:"resourceName"`

	// The operation that will be allowed or denied.
	Operation string `json:"operation"`

	// Specifies the type of resource.
	ResourceType string `json:"resourceType"`
}

// AssertKafkaAclV2Required checks if the required fields are not zero-ed
func AssertKafkaAclV2Required(obj KafkaAclV2) error {
	elements := map[string]interface{}{
		"principal":      obj.Principal,
		"permissionType": obj.PermissionType,
		"host":           obj.Host,
		"patternType":    obj.PatternType,
		"resourceName":   obj.ResourceName,
		"operation":      obj.Operation,
		"resourceType":   obj.ResourceType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseKafkaAclV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaAclV2 (e.g. [][]KafkaAclV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaAclV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaAclV2, ok := obj.(KafkaAclV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaAclV2Required(aKafkaAclV2)
	})
}
