/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KafkaTopicV2ApiController binds http requests to an api service and writes the service results to the http response
type KafkaTopicV2ApiController struct {
	service      KafkaTopicV2ApiServicer
	errorHandler ErrorHandler
}

// KafkaTopicV2ApiOption for how the controller is set up.
type KafkaTopicV2ApiOption func(*KafkaTopicV2ApiController)

// WithKafkaTopicV2ApiErrorHandler inject ErrorHandler into controller
func WithKafkaTopicV2ApiErrorHandler(h ErrorHandler) KafkaTopicV2ApiOption {
	return func(c *KafkaTopicV2ApiController) {
		c.errorHandler = h
	}
}

// NewKafkaTopicV2ApiController creates a default api controller
func NewKafkaTopicV2ApiController(s KafkaTopicV2ApiServicer, opts ...KafkaTopicV2ApiOption) Router {
	controller := &KafkaTopicV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KafkaTopicV2ApiController
func (c *KafkaTopicV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2OperationsApplicationsKafkaTopicsV2KafkaTopicIdModifyConfigsV2Put",
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/applications/kafka/topics/v2/{kafkaTopicId}/modify-configs/v2",
			c.ClusterManagementV2OperationsApplicationsKafkaTopicsV2KafkaTopicIdModifyConfigsV2Put,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/topics/v2/{kafkaTopicId}/",
			c.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdDelete,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/topics/v2/{kafkaTopicId}/",
			c.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdGet,
		},
		{
			"ClusterManagementV2ResourcesApplicationsKafkaTopicsV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/topics/v2/",
			c.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2Post,
		},
	}
}

// ClusterManagementV2OperationsApplicationsKafkaTopicsV2KafkaTopicIdModifyConfigsV2Put - Update Kafka topic configs
func (c *KafkaTopicV2ApiController) ClusterManagementV2OperationsApplicationsKafkaTopicsV2KafkaTopicIdModifyConfigsV2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaTopicIdParam := params["kafkaTopicId"]

	bodyParam := KafkaTopicConfigsV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaTopicConfigsV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsKafkaTopicsV2KafkaTopicIdModifyConfigsV2Put(r.Context(), kafkaTopicIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdDelete - Delete the kafka topic
func (c *KafkaTopicV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaTopicIdParam := params["kafkaTopicId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdDelete(r.Context(), kafkaTopicIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdGet - Get Kafka Topic details
func (c *KafkaTopicV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	kafkaTopicIdParam := params["kafkaTopicId"]

	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2KafkaTopicIdGet(r.Context(), kafkaTopicIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesApplicationsKafkaTopicsV2Post - Create a Kafka Topic
func (c *KafkaTopicV2ApiController) ClusterManagementV2ResourcesApplicationsKafkaTopicsV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := KafkaTopicV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaTopicV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaTopicsV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
