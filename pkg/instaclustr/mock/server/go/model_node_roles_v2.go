/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// NodeRolesV2 :
type NodeRolesV2 string

// List of NodeRolesV2
const (
	CASSANDRA                      NodeRolesV2 = "CASSANDRA"
	SPARK_MASTER                   NodeRolesV2 = "SPARK_MASTER"
	SPARK_JOBSERVER                NodeRolesV2 = "SPARK_JOBSERVER"
	KAFKA_BROKER                   NodeRolesV2 = "KAFKA_BROKER"
	KAFKA_DEDICATED_ZOOKEEPER      NodeRolesV2 = "KAFKA_DEDICATED_ZOOKEEPER"
	KAFKA_ZOOKEEPER                NodeRolesV2 = "KAFKA_ZOOKEEPER"
	KAFKA_SCHEMA_REGISTRY          NodeRolesV2 = "KAFKA_SCHEMA_REGISTRY"
	KAFKA_REST_PROXY               NodeRolesV2 = "KAFKA_REST_PROXY"
	APACHE_ZOOKEEPER               NodeRolesV2 = "APACHE_ZOOKEEPER"
	POSTGRESQL                     NodeRolesV2 = "POSTGRESQL"
	PGBOUNCER                      NodeRolesV2 = "PGBOUNCER"
	KAFKA_CONNECT                  NodeRolesV2 = "KAFKA_CONNECT"
	KAFKA_KARAPACE_SCHEMA_REGISTRY NodeRolesV2 = "KAFKA_KARAPACE_SCHEMA_REGISTRY"
	KAFKA_KARAPACE_REST_PROXY      NodeRolesV2 = "KAFKA_KARAPACE_REST_PROXY"
	CADENCE                        NodeRolesV2 = "CADENCE"
	MONGODB                        NodeRolesV2 = "MONGODB"
	REDIS_MASTER                   NodeRolesV2 = "REDIS_MASTER"
	REDIS_REPLICA                  NodeRolesV2 = "REDIS_REPLICA"
	OPENSEARCH_DASHBOARDS          NodeRolesV2 = "OPENSEARCH_DASHBOARDS"
	OPENSEARCH_COORDINATOR         NodeRolesV2 = "OPENSEARCH_COORDINATOR"
	OPENSEARCH_MASTER              NodeRolesV2 = "OPENSEARCH_MASTER"
	OPENSEARCH_DATA_AND_INGEST     NodeRolesV2 = "OPENSEARCH_DATA_AND_INGEST"
)

// AssertNodeRolesV2Required checks if the required fields are not zero-ed
func AssertNodeRolesV2Required(obj NodeRolesV2) error {
	return nil
}

// AssertRecurseNodeRolesV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of NodeRolesV2 (e.g. [][]NodeRolesV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseNodeRolesV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aNodeRolesV2, ok := obj.(NodeRolesV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertNodeRolesV2Required(aNodeRolesV2)
	})
}
