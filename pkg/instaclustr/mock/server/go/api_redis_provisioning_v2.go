/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RedisProvisioningV2APIController binds http requests to an api service and writes the service results to the http response
type RedisProvisioningV2APIController struct {
	service      RedisProvisioningV2APIServicer
	errorHandler ErrorHandler
}

// RedisProvisioningV2APIOption for how the controller is set up.
type RedisProvisioningV2APIOption func(*RedisProvisioningV2APIController)

// WithRedisProvisioningV2APIErrorHandler inject ErrorHandler into controller
func WithRedisProvisioningV2APIErrorHandler(h ErrorHandler) RedisProvisioningV2APIOption {
	return func(c *RedisProvisioningV2APIController) {
		c.errorHandler = h
	}
}

// NewRedisProvisioningV2APIController creates a default api controller
func NewRedisProvisioningV2APIController(s RedisProvisioningV2APIServicer, opts ...RedisProvisioningV2APIOption) Router {
	controller := &RedisProvisioningV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RedisProvisioningV2APIController
func (c *RedisProvisioningV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/redis/clusters/v2/{clusterId}/trigger-backup/v2/",
			c.ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post,
		},
		"ClusterManagementV2OperationsApplicationsRedisRestoreV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/operations/applications/redis/restore/v2",
			c.ClusterManagementV2OperationsApplicationsRedisRestoreV2Post,
		},
		"ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/redis/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/redis/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/redis/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsRedisClustersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/redis/clusters/v2",
			c.ClusterManagementV2ResourcesApplicationsRedisClustersV2Post,
		},
	}
}

// ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post - Manually trigger cluster backup.
func (c *RedisProvisioningV2APIController) ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsRedisRestoreV2Post - Trigger a Redis Cluster Restore
func (c *RedisProvisioningV2APIController) ClusterManagementV2OperationsApplicationsRedisRestoreV2Post(w http.ResponseWriter, r *http.Request) {
	clusterRestoreV2Param := ClusterRestoreV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClusterRestoreV2Required(clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClusterRestoreV2Constraints(clusterRestoreV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsRedisRestoreV2Post(r.Context(), clusterRestoreV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete - Delete cluster
func (c *RedisProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet - Get Redis cluster details.
func (c *RedisProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut - Update Redis Cluster Details
func (c *RedisProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	redisClusterUpdateV2Param := RedisClusterUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&redisClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedisClusterUpdateV2Required(redisClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRedisClusterUpdateV2Constraints(redisClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut(r.Context(), clusterIdParam, redisClusterUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2Post - Create a Redis Cluster
func (c *RedisProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsRedisClustersV2Post(w http.ResponseWriter, r *http.Request) {
	redisClusterV2Param := RedisClusterV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&redisClusterV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedisClusterV2Required(redisClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRedisClusterV2Constraints(redisClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsRedisClustersV2Post(r.Context(), redisClusterV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
