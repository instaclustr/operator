/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApacheKafkaSchemaRegistryUserAPIController binds http requests to an api service and writes the service results to the http response
type ApacheKafkaSchemaRegistryUserAPIController struct {
	service      ApacheKafkaSchemaRegistryUserAPIServicer
	errorHandler ErrorHandler
}

// ApacheKafkaSchemaRegistryUserAPIOption for how the controller is set up.
type ApacheKafkaSchemaRegistryUserAPIOption func(*ApacheKafkaSchemaRegistryUserAPIController)

// WithApacheKafkaSchemaRegistryUserAPIErrorHandler inject ErrorHandler into controller
func WithApacheKafkaSchemaRegistryUserAPIErrorHandler(h ErrorHandler) ApacheKafkaSchemaRegistryUserAPIOption {
	return func(c *ApacheKafkaSchemaRegistryUserAPIController) {
		c.errorHandler = h
	}
}

// NewApacheKafkaSchemaRegistryUserAPIController creates a default api controller
func NewApacheKafkaSchemaRegistryUserAPIController(s ApacheKafkaSchemaRegistryUserAPIServicer, opts ...ApacheKafkaSchemaRegistryUserAPIOption) Router {
	controller := &ApacheKafkaSchemaRegistryUserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApacheKafkaSchemaRegistryUserAPIController
func (c *ApacheKafkaSchemaRegistryUserAPIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesKafkaSchemaRegistryClusterClusterIdKafkaSchemaRegistryUsersV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/kafka_schema_registry_cluster/{clusterId}/kafka-schema-registry-users/v2/",
			c.ClusterManagementV2DataSourcesKafkaSchemaRegistryClusterClusterIdKafkaSchemaRegistryUsersV2Get,
		},
		"ClusterManagementV2OperationsApplicationsKafkaSchemaRegistryClustersV2ClusterIdUsersV2UserNameChangePasswordV2Put": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/applications/kafka-schema-registry/clusters/v2/{clusterId}/users/v2/{userName}/change-password/v2",
			c.ClusterManagementV2OperationsApplicationsKafkaSchemaRegistryClustersV2ClusterIdUsersV2UserNameChangePasswordV2Put,
		},
	}
}

// ClusterManagementV2DataSourcesKafkaSchemaRegistryClusterClusterIdKafkaSchemaRegistryUsersV2Get - List all Kafka Schema Registry users.
func (c *ApacheKafkaSchemaRegistryUserAPIController) ClusterManagementV2DataSourcesKafkaSchemaRegistryClusterClusterIdKafkaSchemaRegistryUsersV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesKafkaSchemaRegistryClusterClusterIdKafkaSchemaRegistryUsersV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsApplicationsKafkaSchemaRegistryClustersV2ClusterIdUsersV2UserNameChangePasswordV2Put - Change a Kafka Schema Registry user password.
func (c *ApacheKafkaSchemaRegistryUserAPIController) ClusterManagementV2OperationsApplicationsKafkaSchemaRegistryClustersV2ClusterIdUsersV2UserNameChangePasswordV2Put(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	userNameParam := params["userName"]
	kafkaSchemaRegistryUserPasswordV2Param := KafkaSchemaRegistryUserPasswordV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaSchemaRegistryUserPasswordV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaSchemaRegistryUserPasswordV2Required(kafkaSchemaRegistryUserPasswordV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaSchemaRegistryUserPasswordV2Constraints(kafkaSchemaRegistryUserPasswordV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsKafkaSchemaRegistryClustersV2ClusterIdUsersV2UserNameChangePasswordV2Put(r.Context(), clusterIdParam, userNameParam, kafkaSchemaRegistryUserPasswordV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
