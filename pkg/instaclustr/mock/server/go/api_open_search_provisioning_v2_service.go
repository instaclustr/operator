/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
	"sync"
)

// OpenSearchProvisioningV2APIService is a service that implements the logic for the OpenSearchProvisioningV2APIServicer
// This service should implement the business logic for every endpoint for the OpenSearchProvisioningV2API API.
// Include any external packages or services that will be required by this service.
type OpenSearchProvisioningV2APIService struct {
	mu       sync.RWMutex
	clusters map[string]*OpenSearchClusterV2
}

// NewOpenSearchProvisioningV2APIService creates a default api service
func NewOpenSearchProvisioningV2APIService() OpenSearchProvisioningV2APIServicer {
	return &OpenSearchProvisioningV2APIService{clusters: map[string]*OpenSearchClusterV2{}}
}

// ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get - List recent cluster backup events.
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, CommonClusterBackupEventsV2{}) or use other options such as http.Ok ...
	// return Response(200, CommonClusterBackupEventsV2{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ClusterManagementV2DataSourcesApplicationsOpensearchClustersV2ClusterIdListBackupsV2Get method not implemented")
}

// ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post - Manually trigger cluster backup.
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(202, {}) or use other options such as http.Ok ...
	// return Response(202, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("ClusterManagementV2OperationsApplicationsOpensearchClustersV2ClusterIdTriggerBackupV2Post method not implemented")
}

// ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post - Trigger a OpenSearch Cluster Restore
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post(ctx context.Context, openSearchClusterRestoreV2 OpenSearchClusterRestoreV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(202, OpenSearchClusterRestoreV2{}) or use other options such as http.Ok ...
	// return Response(202, OpenSearchClusterRestoreV2{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ClusterManagementV2OperationsApplicationsOpensearchRestoreV2Post method not implemented")
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete - Delete cluster
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdDelete with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	_, exists := s.clusters[clusterId]
	if !exists {
		return Response(http.StatusNotFound, nil), nil
	}

	delete(s.clusters, clusterId)

	return Response(http.StatusNoContent, nil), nil
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet - Get OpenSearch cluster details
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdGet with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	o, exists := s.clusters[clusterId]
	if !exists {
		return Response(http.StatusNotFound, nil), nil
	}

	o.Status = RUNNING

	return Response(http.StatusOK, o), nil
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut - Update a OpenSearch cluster
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut(ctx context.Context, clusterId string, openSearchClusterUpdateV2 OpenSearchClusterUpdateV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsOpensearchClustersV2ClusterIdPut with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	o, exists := s.clusters[clusterId]
	if !exists {
		return Response(http.StatusNotFound, nil), nil
	}

	o.DataNodes = openSearchClusterUpdateV2.DataNodes
	o.OpensearchDashboards = openSearchClusterUpdateV2.OpensearchDashboards
	o.ClusterManagerNodes = openSearchClusterUpdateV2.ClusterManagerNodes

	return Response(202, nil), nil

	//TODO: Uncomment the next line to return response Response(404, ErrorListResponseV2{}) or use other options such as http.Ok ...
	//return Response(404, ErrorListResponseV2{}), nil
}

// ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post - Create an OpenSearch cluster
func (s *OpenSearchProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post(ctx context.Context, openSearchClusterV2 OpenSearchClusterV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsOpensearchClustersV2Post with the required logic for this service method.
	// Add api_open_search_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	newOpenSearch := &OpenSearchClusterV2{}

	newOpenSearch = &openSearchClusterV2
	newOpenSearch.Id = openSearchClusterV2.Name + CreatedID

	for i := range newOpenSearch.DataCentres {
		newOpenSearch.DataCentres[i].Id = newOpenSearch.DataCentres[i].Name + "-" + CreatedID
	}

	s.clusters[newOpenSearch.Id] = newOpenSearch

	return Response(202, newOpenSearch), nil
}
