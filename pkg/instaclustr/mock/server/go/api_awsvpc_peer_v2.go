/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AWSVPCPeerV2ApiController binds http requests to an api service and writes the service results to the http response
type AWSVPCPeerV2ApiController struct {
	service      AWSVPCPeerV2ApiServicer
	errorHandler ErrorHandler
}

// AWSVPCPeerV2ApiOption for how the controller is set up.
type AWSVPCPeerV2ApiOption func(*AWSVPCPeerV2ApiController)

// WithAWSVPCPeerV2ApiErrorHandler inject ErrorHandler into controller
func WithAWSVPCPeerV2ApiErrorHandler(h ErrorHandler) AWSVPCPeerV2ApiOption {
	return func(c *AWSVPCPeerV2ApiController) {
		c.errorHandler = h
	}
}

// NewAWSVPCPeerV2ApiController creates a default api controller
func NewAWSVPCPeerV2ApiController(s AWSVPCPeerV2ApiServicer, opts ...AWSVPCPeerV2ApiOption) Router {
	controller := &AWSVPCPeerV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AWSVPCPeerV2ApiController
func (c *AWSVPCPeerV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2DataSourcesProvidersAwsVpcPeersV2Get",
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/aws/vpc-peers/v2",
			c.ClusterManagementV2DataSourcesProvidersAwsVpcPeersV2Get,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsVpcPeersV2Post",
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/aws/vpc-peers/v2",
			c.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2Post,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdDelete",
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/aws/vpc-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdDelete,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdGet",
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/aws/vpc-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdGet,
		},
		{
			"ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/providers/aws/vpc-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdPut,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersAwsVpcPeersV2Get - List all AWS VPC Peering requests
func (c *AWSVPCPeerV2ApiController) ClusterManagementV2DataSourcesProvidersAwsVpcPeersV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesProvidersAwsVpcPeersV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsVpcPeersV2Post - Create AWS VPC Peering Request
func (c *AWSVPCPeerV2ApiController) ClusterManagementV2ResourcesProvidersAwsVpcPeersV2Post(w http.ResponseWriter, r *http.Request) {
	bodyParam := AwsVpcPeerV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsVpcPeerV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2Post(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdDelete - Delete AWS VPC Peering Connection
func (c *AWSVPCPeerV2ApiController) ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]

	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdDelete(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdGet - Get AWS VPC Peering Connection info
func (c *AWSVPCPeerV2ApiController) ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]

	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdGet(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdPut - Update AWS VPC Peering Connection info
func (c *AWSVPCPeerV2ApiController) ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]

	bodyParam := AwsVpcPeerUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAwsVpcPeerUpdateV2Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersAwsVpcPeersV2VpcPeerIdPut(r.Context(), vpcPeerIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
