/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// KafkaClusterUpdateV2 -
type KafkaClusterUpdateV2 struct {

	// List of data centre settings.
	DataCentres []KafkaDataCentreV2 `json:"dataCentres"`

	// Provision additional dedicated nodes for Apache Zookeeper to run on. Zookeeper nodes will be co-located with Kafka if this is not provided
	DedicatedZookeeper []KafkaDedicatedZookeeperSettingsUpdateV2 `json:"dedicatedZookeeper,omitempty"`
}

// AssertKafkaClusterUpdateV2Required checks if the required fields are not zero-ed
func AssertKafkaClusterUpdateV2Required(obj KafkaClusterUpdateV2) error {
	elements := map[string]interface{}{
		"dataCentres": obj.DataCentres,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DataCentres {
		if err := AssertKafkaDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DedicatedZookeeper {
		if err := AssertKafkaDedicatedZookeeperSettingsUpdateV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseKafkaClusterUpdateV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of KafkaClusterUpdateV2 (e.g. [][]KafkaClusterUpdateV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseKafkaClusterUpdateV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aKafkaClusterUpdateV2, ok := obj.(KafkaClusterUpdateV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertKafkaClusterUpdateV2Required(aKafkaClusterUpdateV2)
	})
}
