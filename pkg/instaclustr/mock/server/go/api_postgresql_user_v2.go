/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PostgresqlUserV2ApiController binds http requests to an api service and writes the service results to the http response
type PostgresqlUserV2ApiController struct {
	service      PostgresqlUserV2ApiServicer
	errorHandler ErrorHandler
}

// PostgresqlUserV2ApiOption for how the controller is set up.
type PostgresqlUserV2ApiOption func(*PostgresqlUserV2ApiController)

// WithPostgresqlUserV2ApiErrorHandler inject ErrorHandler into controller
func WithPostgresqlUserV2ApiErrorHandler(h ErrorHandler) PostgresqlUserV2ApiOption {
	return func(c *PostgresqlUserV2ApiController) {
		c.errorHandler = h
	}
}

// NewPostgresqlUserV2ApiController creates a default api controller
func NewPostgresqlUserV2ApiController(s PostgresqlUserV2ApiServicer, opts ...PostgresqlUserV2ApiOption) Router {
	controller := &PostgresqlUserV2ApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PostgresqlUserV2ApiController
func (c *PostgresqlUserV2ApiController) Routes() Routes {
	return Routes{
		{
			"ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut",
			strings.ToUpper("Put"),
			"/cluster-management/v2/operations/applications/postgresql/clusters/v2/{clusterId}/update-default-user-password",
			c.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut,
		},
	}
}

// ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut - Update the default PostgreSQL user password.
func (c *PostgresqlUserV2ApiController) ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]

	bodyParam := PostgresqlUserSummary{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostgresqlUserSummaryRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2OperationsApplicationsPostgresqlClustersV2ClusterIdUpdateDefaultUserPasswordPut(r.Context(), clusterIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
