/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ClusterNetworkFirewallRuleV2APIController binds http requests to an api service and writes the service results to the http response
type ClusterNetworkFirewallRuleV2APIController struct {
	service      ClusterNetworkFirewallRuleV2APIServicer
	errorHandler ErrorHandler
}

// ClusterNetworkFirewallRuleV2APIOption for how the controller is set up.
type ClusterNetworkFirewallRuleV2APIOption func(*ClusterNetworkFirewallRuleV2APIController)

// WithClusterNetworkFirewallRuleV2APIErrorHandler inject ErrorHandler into controller
func WithClusterNetworkFirewallRuleV2APIErrorHandler(h ErrorHandler) ClusterNetworkFirewallRuleV2APIOption {
	return func(c *ClusterNetworkFirewallRuleV2APIController) {
		c.errorHandler = h
	}
}

// NewClusterNetworkFirewallRuleV2APIController creates a default api controller
func NewClusterNetworkFirewallRuleV2APIController(s ClusterNetworkFirewallRuleV2APIServicer, opts ...ClusterNetworkFirewallRuleV2APIOption) Router {
	controller := &ClusterNetworkFirewallRuleV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ClusterNetworkFirewallRuleV2APIController
func (c *ClusterNetworkFirewallRuleV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesClusterClusterIdNetworkFirewallRulesV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster/{clusterId}/network-firewall-rules/v2",
			c.ClusterManagementV2DataSourcesClusterClusterIdNetworkFirewallRulesV2Get,
		},
		"ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/network-firewall-rules/v2/{firewallRuleId}",
			c.ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdDelete,
		},
		"ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/network-firewall-rules/v2/{firewallRuleId}",
			c.ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdGet,
		},
		"ClusterManagementV2ResourcesNetworkFirewallRulesV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/network-firewall-rules/v2",
			c.ClusterManagementV2ResourcesNetworkFirewallRulesV2Post,
		},
	}
}

// ClusterManagementV2DataSourcesClusterClusterIdNetworkFirewallRulesV2Get - List all cluster network firewall rules
func (c *ClusterNetworkFirewallRuleV2APIController) ClusterManagementV2DataSourcesClusterClusterIdNetworkFirewallRulesV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2DataSourcesClusterClusterIdNetworkFirewallRulesV2Get(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdDelete - Delete cluster network firewall rule
func (c *ClusterNetworkFirewallRuleV2APIController) ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	firewallRuleIdParam := params["firewallRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdDelete(r.Context(), firewallRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdGet - Get cluster network firewall rule details
func (c *ClusterNetworkFirewallRuleV2APIController) ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	firewallRuleIdParam := params["firewallRuleId"]
	result, err := c.service.ClusterManagementV2ResourcesNetworkFirewallRulesV2FirewallRuleIdGet(r.Context(), firewallRuleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesNetworkFirewallRulesV2Post - Add a cluster network firewall rule
func (c *ClusterNetworkFirewallRuleV2APIController) ClusterManagementV2ResourcesNetworkFirewallRulesV2Post(w http.ResponseWriter, r *http.Request) {
	clusterNetworkFirewallRuleV2Param := ClusterNetworkFirewallRuleV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clusterNetworkFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClusterNetworkFirewallRuleV2Required(clusterNetworkFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClusterNetworkFirewallRuleV2Constraints(clusterNetworkFirewallRuleV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesNetworkFirewallRulesV2Post(r.Context(), clusterNetworkFirewallRuleV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
