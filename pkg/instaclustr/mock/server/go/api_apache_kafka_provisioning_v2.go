/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApacheKafkaProvisioningV2APIController binds http requests to an api service and writes the service results to the http response
type ApacheKafkaProvisioningV2APIController struct {
	service      ApacheKafkaProvisioningV2APIServicer
	errorHandler ErrorHandler
}

// ApacheKafkaProvisioningV2APIOption for how the controller is set up.
type ApacheKafkaProvisioningV2APIOption func(*ApacheKafkaProvisioningV2APIController)

// WithApacheKafkaProvisioningV2APIErrorHandler inject ErrorHandler into controller
func WithApacheKafkaProvisioningV2APIErrorHandler(h ErrorHandler) ApacheKafkaProvisioningV2APIOption {
	return func(c *ApacheKafkaProvisioningV2APIController) {
		c.errorHandler = h
	}
}

// NewApacheKafkaProvisioningV2APIController creates a default api controller
func NewApacheKafkaProvisioningV2APIController(s ApacheKafkaProvisioningV2APIServicer, opts ...ApacheKafkaProvisioningV2APIOption) Router {
	controller := &ApacheKafkaProvisioningV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApacheKafkaProvisioningV2APIController
func (c *ApacheKafkaProvisioningV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/applications/kafka/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/applications/kafka/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut": Route{
			strings.ToUpper("Put"),
			"/cluster-management/v2/resources/applications/kafka/clusters/v2/{clusterId}",
			c.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut,
		},
		"ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/applications/kafka/clusters/v2",
			c.ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post,
		},
	}
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete - Delete cluster
func (c *ApacheKafkaProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet - Get Kafka cluster details.
func (c *ApacheKafkaProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet(r.Context(), clusterIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut - Update Kafka Cluster Details
func (c *ApacheKafkaProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	clusterIdParam := params["clusterId"]
	kafkaClusterUpdateV2Param := KafkaClusterUpdateV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaClusterUpdateV2Required(kafkaClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaClusterUpdateV2Constraints(kafkaClusterUpdateV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut(r.Context(), clusterIdParam, kafkaClusterUpdateV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post - Create a Kafka cluster.
func (c *ApacheKafkaProvisioningV2APIController) ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post(w http.ResponseWriter, r *http.Request) {
	kafkaClusterV2Param := KafkaClusterV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&kafkaClusterV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertKafkaClusterV2Required(kafkaClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertKafkaClusterV2Constraints(kafkaClusterV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post(r.Context(), kafkaClusterV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
