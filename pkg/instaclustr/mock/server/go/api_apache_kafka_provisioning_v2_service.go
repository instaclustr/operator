/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"sync"
)

// ApacheKafkaProvisioningV2APIService is a service that implements the logic for the ApacheKafkaProvisioningV2APIServicer
// This service should implement the business logic for every endpoint for the ApacheKafkaProvisioningV2API API.
// Include any external packages or services that will be required by this service.
type ApacheKafkaProvisioningV2APIService struct {
	clusters map[string]*KafkaClusterV2
	mu       sync.RWMutex
}

// NewApacheKafkaProvisioningV2APIService creates a default api service
func NewApacheKafkaProvisioningV2APIService() ApacheKafkaProvisioningV2APIServicer {
	return &ApacheKafkaProvisioningV2APIService{clusters: map[string]*KafkaClusterV2{}}
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete - Delete cluster
func (s *ApacheKafkaProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdDelete with the required logic for this service method.
	// Add api_apache_kafka_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	delete(s.clusters, clusterId)
	return Response(204, nil), nil
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet - Get Kafka cluster details.
func (s *ApacheKafkaProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdGet with the required logic for this service method.
	// Add api_apache_kafka_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	cluster, exists := s.clusters[clusterId]
	if !exists {
		return Response(404, nil), nil
	}

	cluster.Status = RUNNING

	return Response(200, cluster), nil
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut - Update Kafka Cluster Details
func (s *ApacheKafkaProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut(ctx context.Context, clusterId string, kafkaClusterUpdateV2 KafkaClusterUpdateV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsKafkaClustersV2ClusterIdPut with the required logic for this service method.
	// Add api_apache_kafka_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	cluster, exists := s.clusters[clusterId]
	if !exists {
		return Response(404, nil), nil
	}

	newNode := []NodeDetailsV2{{
		NodeRoles:     []NodeRolesV2{"KAFKA_BROKER", "KAFKA_ZOOKEEPER"},
		Rack:          "us-east-1a",
		NodeSize:      kafkaClusterUpdateV2.DataCentres[0].NodeSize,
		PublicAddress: "54.146.160.89",
	}}

	cluster.DataCentres[0].Nodes = newNode

	return Response(202, nil), nil

	//TODO: Uncomment the next line to return response Response(404, ErrorListResponseV2{}) or use other options such as http.Ok ...
	//return Response(404, ErrorListResponseV2{}), nil
}

// ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post - Create a Kafka cluster.
func (s *ApacheKafkaProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post(ctx context.Context, kafkaClusterV2 KafkaClusterV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsKafkaClustersV2Post with the required logic for this service method.
	// Add api_apache_kafka_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	s.mu.Lock()
	defer s.mu.Unlock()

	kafkaClusterV2.Id = kafkaClusterV2.Name + CreatedID

	for i := range kafkaClusterV2.DataCentres {
		kafkaClusterV2.DataCentres[i].Id = kafkaClusterV2.DataCentres[i].Name + "-" + CreatedID
	}

	s.clusters[kafkaClusterV2.Id] = &kafkaClusterV2

	return Response(202, kafkaClusterV2), nil
}
