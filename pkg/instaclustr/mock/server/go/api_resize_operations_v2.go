/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ResizeOperationsV2APIController binds http requests to an api service and writes the service results to the http response
type ResizeOperationsV2APIController struct {
	service      ResizeOperationsV2APIServicer
	errorHandler ErrorHandler
}

// ResizeOperationsV2APIOption for how the controller is set up.
type ResizeOperationsV2APIOption func(*ResizeOperationsV2APIController)

// WithResizeOperationsV2APIErrorHandler inject ErrorHandler into controller
func WithResizeOperationsV2APIErrorHandler(h ErrorHandler) ResizeOperationsV2APIOption {
	return func(c *ResizeOperationsV2APIController) {
		c.errorHandler = h
	}
}

// NewResizeOperationsV2APIController creates a default api controller
func NewResizeOperationsV2APIController(s ResizeOperationsV2APIServicer, opts ...ResizeOperationsV2APIOption) Router {
	controller := &ResizeOperationsV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ResizeOperationsV2APIController
func (c *ResizeOperationsV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesClusterDataCentresV2ClusterDataCentreIdResizeOperationsV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/cluster-data-centres/v2/{clusterDataCentreId}/resize/operations/v2",
			c.ClusterManagementV2DataSourcesClusterDataCentresV2ClusterDataCentreIdResizeOperationsV2Get,
		},
		"ClusterManagementV2OperationsResizeOperationsV2OperationIdCancelV2Delete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/operations/resize-operations/v2/{operationId}/cancel/v2",
			c.ClusterManagementV2OperationsResizeOperationsV2OperationIdCancelV2Delete,
		},
	}
}

// ClusterManagementV2DataSourcesClusterDataCentresV2ClusterDataCentreIdResizeOperationsV2Get - Get resize operations for a Cluster Data Centre
func (c *ResizeOperationsV2APIController) ClusterManagementV2DataSourcesClusterDataCentresV2ClusterDataCentreIdResizeOperationsV2Get(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	clusterDataCentreIdParam := params["clusterDataCentreId"]
	activeOnlyParam, err := parseBoolParameter(
		query.Get("activeOnly"),
		WithParse[bool](parseBool),
	)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.ClusterManagementV2DataSourcesClusterDataCentresV2ClusterDataCentreIdResizeOperationsV2Get(r.Context(), clusterDataCentreIdParam, activeOnlyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2OperationsResizeOperationsV2OperationIdCancelV2Delete - Cancel a resize Cluster Data Centre operation
func (c *ResizeOperationsV2APIController) ClusterManagementV2OperationsResizeOperationsV2OperationIdCancelV2Delete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	operationIdParam := params["operationId"]
	result, err := c.service.ClusterManagementV2OperationsResizeOperationsV2OperationIdCancelV2Delete(r.Context(), operationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
