/*
 * Instaclustr Cluster Management API
 *
 * Instaclustr Cluster Management API
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// CassandraClusterV2 - Definition of a managed Cassandra cluster that can be provisioned in Instaclustr.
type CassandraClusterV2 struct {

	// Creates a PCI compliant cluster, see [PCI Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
	PciComplianceMode bool `json:"pciComplianceMode"`

	//
	TwoFactorDelete []TwoFactorDeleteSettingsV2 `json:"twoFactorDelete,omitempty"`

	// Password of the default user created for the Cassandra cluster.
	DefaultUserPassword string `json:"defaultUserPassword,omitempty"`

	// List of data centre settings.
	DataCentres []CassandraDataCentreV2 `json:"dataCentres"`

	CurrentClusterOperationStatus CurrentClusterOperationStatusV2 `json:"currentClusterOperationStatus,omitempty"`

	// Adds the specified version of Apache Spark to the Cassandra cluster.
	Spark []SparkDetailsV2 `json:"spark,omitempty"`

	// Creates the cluster with private network only, see [Private Network Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
	PrivateNetworkCluster bool `json:"privateNetworkCluster"`

	// Version of Cassandra to run on the cluster. Available versions: <ul> <li>`4.0.4`</li> <li>`3.11.13`</li> </ul>
	CassandraVersion string `json:"cassandraVersion"`

	// Adds Apache Lucene to the Cassandra cluster.
	LuceneEnabled bool `json:"luceneEnabled"`

	// Enables Password Authentication and User Authorization.
	PasswordAndUserAuth bool `json:"passwordAndUserAuth"`

	// Name of the cluster.
	Name string `json:"name"`

	// ID of the cluster.
	Id string `json:"id,omitempty"`

	SlaTier SlaTierV2 `json:"slaTier"`

	// Status of the cluster.
	Status string `json:"status,omitempty"`
}

// AssertCassandraClusterV2Required checks if the required fields are not zero-ed
func AssertCassandraClusterV2Required(obj CassandraClusterV2) error {
	elements := map[string]interface{}{
		"pciComplianceMode":     obj.PciComplianceMode,
		"dataCentres":           obj.DataCentres,
		"privateNetworkCluster": obj.PrivateNetworkCluster,
		"cassandraVersion":      obj.CassandraVersion,
		"luceneEnabled":         obj.LuceneEnabled,
		"passwordAndUserAuth":   obj.PasswordAndUserAuth,
		"name":                  obj.Name,
		"slaTier":               obj.SlaTier,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.TwoFactorDelete {
		if err := AssertTwoFactorDeleteSettingsV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DataCentres {
		if err := AssertCassandraDataCentreV2Required(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Spark {
		if err := AssertSparkDetailsV2Required(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseCassandraClusterV2Required recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of CassandraClusterV2 (e.g. [][]CassandraClusterV2), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseCassandraClusterV2Required(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aCassandraClusterV2, ok := obj.(CassandraClusterV2)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertCassandraClusterV2Required(aCassandraClusterV2)
	})
}
