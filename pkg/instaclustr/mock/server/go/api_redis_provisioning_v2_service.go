/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
)

// RedisProvisioningV2APIService is a service that implements the logic for the RedisProvisioningV2APIServicer
// This service should implement the business logic for every endpoint for the RedisProvisioningV2API API.
// Include any external packages or services that will be required by this service.
type RedisProvisioningV2APIService struct {
	MockRedisCluster *RedisClusterV2
}

// NewRedisProvisioningV2APIService creates a default api service
func NewRedisProvisioningV2APIService() RedisProvisioningV2APIServicer {
	return &RedisProvisioningV2APIService{}
}

// ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post - Manually trigger cluster backup.
func (s *RedisProvisioningV2APIService) ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(202, {}) or use other options such as http.Ok ...
	// return Response(202, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("ClusterManagementV2OperationsApplicationsRedisClustersV2ClusterIdTriggerBackupV2Post method not implemented")
}

// ClusterManagementV2OperationsApplicationsRedisRestoreV2Post - Trigger a Redis Cluster Restore
func (s *RedisProvisioningV2APIService) ClusterManagementV2OperationsApplicationsRedisRestoreV2Post(ctx context.Context, clusterRestoreV2 ClusterRestoreV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2OperationsApplicationsRedisRestoreV2Post with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(202, ClusterRestoreV2{}) or use other options such as http.Ok ...
	// return Response(202, ClusterRestoreV2{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ClusterManagementV2OperationsApplicationsRedisRestoreV2Post method not implemented")
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete - Delete cluster
func (s *RedisProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdDelete with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	s.MockRedisCluster = nil
	return Response(204, nil), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet - Get Redis cluster details.
func (s *RedisProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet(ctx context.Context, clusterId string) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdGet with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	if s.MockRedisCluster != nil {
		s.MockRedisCluster.Status = RUNNING
	} else {
		return Response(404, nil), nil
	}

	return Response(200, s.MockRedisCluster), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut - Update Redis Cluster Details
func (s *RedisProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut(ctx context.Context, clusterId string, redisClusterUpdateV2 RedisClusterUpdateV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2ClusterIdPut with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	newNode := []NodeDetailsV2{{
		Rack:          "us-east-1a",
		NodeSize:      redisClusterUpdateV2.DataCentres[0].NodeSize,
		PublicAddress: "54.146.160.89",
	}}

	s.MockRedisCluster.DataCentres[0].Nodes = newNode

	return Response(202, nil), nil
}

// ClusterManagementV2ResourcesApplicationsRedisClustersV2Post - Create a Redis Cluster
func (s *RedisProvisioningV2APIService) ClusterManagementV2ResourcesApplicationsRedisClustersV2Post(ctx context.Context, redisClusterV2 RedisClusterV2) (ImplResponse, error) {
	// TODO - update ClusterManagementV2ResourcesApplicationsRedisClustersV2Post with the required logic for this service method.
	// Add api_redis_provisioning_v2_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	s.MockRedisCluster = &redisClusterV2
	s.MockRedisCluster.Id = CreatedID
	return Response(202, s.MockRedisCluster), nil
}
