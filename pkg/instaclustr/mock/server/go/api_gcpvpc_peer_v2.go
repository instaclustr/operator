/*
 * Instaclustr API Documentation
 *
 *
 *
 * API version: Current
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GCPVPCPeerV2APIController binds http requests to an api service and writes the service results to the http response
type GCPVPCPeerV2APIController struct {
	service      GCPVPCPeerV2APIServicer
	errorHandler ErrorHandler
}

// GCPVPCPeerV2APIOption for how the controller is set up.
type GCPVPCPeerV2APIOption func(*GCPVPCPeerV2APIController)

// WithGCPVPCPeerV2APIErrorHandler inject ErrorHandler into controller
func WithGCPVPCPeerV2APIErrorHandler(h ErrorHandler) GCPVPCPeerV2APIOption {
	return func(c *GCPVPCPeerV2APIController) {
		c.errorHandler = h
	}
}

// NewGCPVPCPeerV2APIController creates a default api controller
func NewGCPVPCPeerV2APIController(s GCPVPCPeerV2APIServicer, opts ...GCPVPCPeerV2APIOption) Router {
	controller := &GCPVPCPeerV2APIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GCPVPCPeerV2APIController
func (c *GCPVPCPeerV2APIController) Routes() Routes {
	return Routes{
		"ClusterManagementV2DataSourcesProvidersGcpVpcPeersV2Get": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/data-sources/providers/gcp/vpc-peers/v2",
			c.ClusterManagementV2DataSourcesProvidersGcpVpcPeersV2Get,
		},
		"ClusterManagementV2ResourcesProvidersGcpVpcPeersV2Post": Route{
			strings.ToUpper("Post"),
			"/cluster-management/v2/resources/providers/gcp/vpc-peers/v2",
			c.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2Post,
		},
		"ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdDelete": Route{
			strings.ToUpper("Delete"),
			"/cluster-management/v2/resources/providers/gcp/vpc-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdDelete,
		},
		"ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdGet": Route{
			strings.ToUpper("Get"),
			"/cluster-management/v2/resources/providers/gcp/vpc-peers/v2/{vpcPeerId}",
			c.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdGet,
		},
	}
}

// ClusterManagementV2DataSourcesProvidersGcpVpcPeersV2Get - List all GCP VPC Peering requests
func (c *GCPVPCPeerV2APIController) ClusterManagementV2DataSourcesProvidersGcpVpcPeersV2Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ClusterManagementV2DataSourcesProvidersGcpVpcPeersV2Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersGcpVpcPeersV2Post - Create GCP VPC Peering Request
func (c *GCPVPCPeerV2APIController) ClusterManagementV2ResourcesProvidersGcpVpcPeersV2Post(w http.ResponseWriter, r *http.Request) {
	gcpVpcPeerV2Param := GcpVpcPeerV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gcpVpcPeerV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGcpVpcPeerV2Required(gcpVpcPeerV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGcpVpcPeerV2Constraints(gcpVpcPeerV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2Post(r.Context(), gcpVpcPeerV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdDelete - Delete GCP VPC Peering Connection
func (c *GCPVPCPeerV2APIController) ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdDelete(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdGet - Get GCP VPC Peering Connection info
func (c *GCPVPCPeerV2APIController) ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vpcPeerIdParam := params["vpcPeerId"]
	result, err := c.service.ClusterManagementV2ResourcesProvidersGcpVpcPeersV2VpcPeerIdGet(r.Context(), vpcPeerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
